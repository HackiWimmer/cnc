//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterSecurePanel.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterSecurePanel.h"


// Declare the bitmap loading function
extern void wxC6911InitBitmapResources();

static bool bBitmapLoaded = false;


CncSecureCtrlPanelBase::CncSecureCtrlPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC6911InitBitmapResources();
        bBitmapLoaded = true;
    }
    this->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    wxFlexGridSizer* flexGridSizer428 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer428->SetFlexibleDirection( wxBOTH );
    flexGridSizer428->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer428->AddGrowableCol(0);
    flexGridSizer428->AddGrowableRow(1);
    this->SetSizer(flexGridSizer428);
    
    wxFlexGridSizer* flexGridSizer431 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer431->SetFlexibleDirection( wxBOTH );
    flexGridSizer431->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer431->AddGrowableCol(1);
    flexGridSizer431->AddGrowableRow(0);
    
    flexGridSizer428->Add(flexGridSizer431, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText433 = new wxStaticText(this, wxID_ANY, _("Current Port:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticText433->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_staticText433Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText433->SetFont(m_staticText433Font);
    
    flexGridSizer431->Add(m_staticText433, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText433->SetMinSize(wxSize(124,-1));
    
    m_portName = new wxStaticText(this, wxID_ANY, _("<PortName>"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_portName->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    wxFont m_portNameFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_portName->SetFont(m_portNameFont);
    
    flexGridSizer431->Add(m_portName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_bmpConnectionStateSecure = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("plugin_not_ok")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer431->Add(m_bmpConnectionStateSecure, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer3 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer3->SetFlexibleDirection( wxBOTH );
    flexGridSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3->AddGrowableCol(1);
    flexGridSizer3->AddGrowableRow(0);
    
    flexGridSizer428->Add(flexGridSizer3, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5->SetFlexibleDirection( wxBOTH );
    flexGridSizer5->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5->AddGrowableCol(0);
    flexGridSizer5->AddGrowableRow(0);
    
    flexGridSizer3->Add(flexGridSizer5, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_leftBook = new wxListbook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_leftBook->SetName(wxT("m_leftBook"));
    wxImageList* m_leftBook_il = new wxImageList(32, 32);
    m_leftBook->AssignImageList(m_leftBook_il);
    
    flexGridSizer5->Add(m_leftBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_lpConnect = new wxPanel(m_leftBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_lpConnectImgIndex;
    m_lpConnectImgIndex = m_leftBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-connected@2x")));
    m_leftBook->AddPage(m_lpConnect, _("Connect\nSerial"), false, m_lpConnectImgIndex);
    
    m_lpLoad = new wxPanel(m_leftBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_lpLoadImgIndex;
    m_lpLoadImgIndex = m_leftBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-file_open@2x")));
    m_leftBook->AddPage(m_lpLoad, _("Load\nTemplate"), false, m_lpLoadImgIndex);
    
    m_lpRef = new wxPanel(m_leftBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_lpRefImgIndex;
    m_lpRefImgIndex = m_leftBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-home@2x")));
    m_leftBook->AddPage(m_lpRef, _("Determine\nReferences"), false, m_lpRefImgIndex);
    
    m_lpManually = new wxPanel(m_leftBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_lpManuallyImgIndex;
    m_lpManuallyImgIndex = m_leftBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-fold@2x")));
    m_leftBook->AddPage(m_lpManually, _("Manually\nMove"), false, m_lpManuallyImgIndex);
    
    m_lpRun = new wxPanel(m_leftBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_lpRunImgIndex;
    m_lpRunImgIndex = m_leftBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-start@2x")));
    m_leftBook->AddPage(m_lpRun, _("Run\nTemplate"), false, m_lpRunImgIndex);
    
    m_lpMisc = new wxPanel(m_leftBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_lpMiscImgIndex;
    m_lpMiscImgIndex = m_leftBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-regular-expression@2x")));
    m_leftBook->AddPage(m_lpMisc, _("Miscellaneous\nThings"), false, m_lpMiscImgIndex);
    
    wxFlexGridSizer* flexGridSizer7 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer7->SetFlexibleDirection( wxBOTH );
    flexGridSizer7->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7->AddGrowableCol(0);
    flexGridSizer7->AddGrowableRow(1);
    
    flexGridSizer3->Add(flexGridSizer7, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer59 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer59->SetFlexibleDirection( wxBOTH );
    flexGridSizer59->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer7->Add(flexGridSizer59, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_rightHeadline = new wxStaticText(this, wxID_ANY, _("headline"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_rightHeadline->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_rightHeadlineFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_rightHeadline->SetFont(m_rightHeadlineFont);
    
    flexGridSizer59->Add(m_rightHeadline, 0, wxALL, WXC_FROM_DIP(0));
    
    m_rightBook = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_rightBook->SetName(wxT("m_rightBook"));
    m_rightBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer7->Add(m_rightBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_rpConnect = new wxPanel(m_rightBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_rightBook->AddPage(m_rpConnect, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer593 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer593->SetFlexibleDirection( wxBOTH );
    flexGridSizer593->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer593->AddGrowableCol(0);
    flexGridSizer593->AddGrowableRow(1);
    m_rpConnect->SetSizer(flexGridSizer593);
    
    m_staticText71 = new wxStaticText(m_rpConnect, wxID_ANY, _("Select a Serial:"), wxDefaultPosition, wxDLG_UNIT(m_rpConnect, wxSize(-1,-1)), 0);
    m_staticText71->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer593->Add(m_staticText71, 0, wxALL, WXC_FROM_DIP(5));
    
    m_portSelectorPlaceholder = new wxPanel(m_rpConnect, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rpConnect, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_portSelectorPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer593->Add(m_portSelectorPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btConnectSec = new wxButton(m_rpConnect, wxID_ANY, _("Reconnect"), wxDefaultPosition, wxDLG_UNIT(m_rpConnect, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btConnectSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-connected@2x")), wxLEFT);
    m_btConnectSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_btConnectSecFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btConnectSec->SetFont(m_btConnectSecFont);
    
    flexGridSizer593->Add(m_btConnectSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btResetSec = new wxButton(m_rpConnect, wxID_ANY, _("Reset"), wxDefaultPosition, wxDLG_UNIT(m_rpConnect, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btResetSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("iconmonstr-synchronization-8-16")), wxLEFT);
    m_btResetSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_btResetSecFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btResetSec->SetFont(m_btResetSecFont);
    
    flexGridSizer593->Add(m_btResetSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine446 = new wxStaticLine(m_rpConnect, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rpConnect, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer593->Add(m_staticLine446, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btHardwareRefSec = new wxButton(m_rpConnect, wxID_ANY, _("Evaluate\nHardware\nReference"), wxDefaultPosition, wxDLG_UNIT(m_rpConnect, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btHardwareRefSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("RefDim")), wxLEFT);
    m_btHardwareRefSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_btHardwareRefSecFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btHardwareRefSec->SetFont(m_btHardwareRefSecFont);
    
    flexGridSizer593->Add(m_btHardwareRefSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_rpLoad = new wxPanel(m_rightBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_rightBook->AddPage(m_rpLoad, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer97 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer97->SetFlexibleDirection( wxBOTH );
    flexGridSizer97->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer97->AddGrowableCol(0);
    flexGridSizer97->AddGrowableRow(1);
    m_rpLoad->SetSizer(flexGridSizer97);
    
    m_transferDirPlaceholder = new wxPanel(m_rpLoad, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rpLoad, wxSize(-1,160)), wxTAB_TRAVERSAL);
    m_transferDirPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer97->Add(m_transferDirPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_lruFilePlaceholder = new wxPanel(m_rpLoad, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rpLoad, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_lruFilePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer97->Add(m_lruFilePlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btLoadTemplate = new wxButton(m_rpLoad, wxID_ANY, _("Explorer"), wxDefaultPosition, wxDLG_UNIT(m_rpLoad, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btLoadTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("CncFolder")), wxLEFT);
    m_btLoadTemplate->SetBitmapMargins(2,2);
    #endif
    wxFont m_btLoadTemplateFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btLoadTemplate->SetFont(m_btLoadTemplateFont);
    
    flexGridSizer97->Add(m_btLoadTemplate, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_rpRef = new wxPanel(m_rightBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_rightBook->AddPage(m_rpRef, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer451 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer451->SetFlexibleDirection( wxBOTH );
    flexGridSizer451->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer451->AddGrowableCol(0);
    flexGridSizer451->AddGrowableRow(0);
    m_rpRef->SetSizer(flexGridSizer451);
    
    m_evaluateReferencePlaceholder = new wxPanel(m_rpRef, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rpRef, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_evaluateReferencePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer451->Add(m_evaluateReferencePlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer101 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer101->SetFlexibleDirection( wxBOTH );
    flexGridSizer101->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer101->AddGrowableCol(0);
    flexGridSizer101->AddGrowableRow(0);
    
    flexGridSizer451->Add(flexGridSizer101, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btZeroSec = new wxButton(m_rpRef, wxID_ANY, _("Determine\nZero\nReference"), wxDefaultPosition, wxDLG_UNIT(m_rpRef, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btZeroSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("RefPos")), wxLEFT);
    m_btZeroSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_btZeroSecFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btZeroSec->SetFont(m_btZeroSecFont);
    
    flexGridSizer101->Add(m_btZeroSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_rpManually = new wxPanel(m_rightBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_rightBook->AddPage(m_rpManually, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer255 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer255->SetFlexibleDirection( wxBOTH );
    flexGridSizer255->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer255->AddGrowableCol(0);
    flexGridSizer255->AddGrowableRow(0);
    m_rpManually->SetSizer(flexGridSizer255);
    
    m_listbook435 = new wxListbook(m_rpManually, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rpManually, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_listbook435->SetName(wxT("m_listbook435"));
    wxImageList* m_listbook435_il = new wxImageList(32, 32);
    m_listbook435->AssignImageList(m_listbook435_il);
    
    flexGridSizer255->Add(m_listbook435, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel437 = new wxPanel(m_listbook435, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook435, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel437ImgIndex;
    m_panel437ImgIndex = m_listbook435_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-marker@2x")));
    m_listbook435->AddPage(m_panel437, _("Free-\nstyle"), false, m_panel437ImgIndex);
    
    wxFlexGridSizer* flexGridSizer439 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer439->SetFlexibleDirection( wxBOTH );
    flexGridSizer439->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer439->AddGrowableCol(0);
    flexGridSizer439->AddGrowableRow(0);
    m_panel437->SetSizer(flexGridSizer439);
    
    m_manuallyMovePlaceholder = new wxPanel(m_panel437, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel437, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_manuallyMovePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer439->Add(m_manuallyMovePlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel466 = new wxPanel(m_listbook435, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook435, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel466ImgIndex;
    m_panel466ImgIndex = m_listbook435_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-navi@2x")));
    m_listbook435->AddPage(m_panel466, _("Navigator"), false, m_panel466ImgIndex);
    
    wxFlexGridSizer* flexGridSizer468 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer468->SetFlexibleDirection( wxBOTH );
    flexGridSizer468->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer468->AddGrowableCol(0);
    flexGridSizer468->AddGrowableRow(0);
    m_panel466->SetSizer(flexGridSizer468);
    
    m_navigatorPlaceholder = new wxPanel(m_panel466, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel466, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_navigatorPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer468->Add(m_navigatorPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer473 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer473->SetFlexibleDirection( wxBOTH );
    flexGridSizer473->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer473->AddGrowableCol(0);
    flexGridSizer473->AddGrowableRow(0);
    
    flexGridSizer468->Add(flexGridSizer473, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_speedSliderPlaceholder = new wxPanel(m_panel466, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel466, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_speedSliderPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    
    flexGridSizer473->Add(m_speedSliderPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_speedSliderPlaceholder->SetMinSize(wxSize(-1,200));
    
    m_bmpButton483 = new wxBitmapButton(m_panel466, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-navi@2x")), wxDefaultPosition, wxDLG_UNIT(m_panel466, wxSize(-1,-1)), wxBU_AUTODRAW);
    
    flexGridSizer473->Add(m_bmpButton483, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panel441 = new wxPanel(m_listbook435, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook435, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel441ImgIndex;
    m_panel441ImgIndex = m_listbook435_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-finger@2x")));
    m_listbook435->AddPage(m_panel441, _("Predefind\nPositions"), false, m_panel441ImgIndex);
    
    wxFlexGridSizer* flexGridSizer462 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer462->SetFlexibleDirection( wxBOTH );
    flexGridSizer462->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer462->AddGrowableCol(0);
    flexGridSizer462->AddGrowableRow(0);
    m_panel441->SetSizer(flexGridSizer462);
    
    m_predefinedPositionsPlaceholder = new wxPanel(m_panel441, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel441, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_predefinedPositionsPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer462->Add(m_predefinedPositionsPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel443 = new wxPanel(m_listbook435, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook435, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel443ImgIndex;
    m_panel443ImgIndex = m_listbook435_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-plus2@2x")));
    m_listbook435->AddPage(m_panel443, _("Predefined\nAnchors"), false, m_panel443ImgIndex);
    
    m_rpRun = new wxPanel(m_rightBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_rightBook->AddPage(m_rpRun, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer77 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer77->SetFlexibleDirection( wxBOTH );
    flexGridSizer77->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer77->AddGrowableCol(0);
    flexGridSizer77->AddGrowableRow(1);
    m_rpRun->SetSizer(flexGridSizer77);
    
    wxFlexGridSizer* flexGridSizer79 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer79->SetFlexibleDirection( wxBOTH );
    flexGridSizer79->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer79->AddGrowableCol(0);
    flexGridSizer79->AddGrowableRow(0);
    
    flexGridSizer77->Add(flexGridSizer79, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_rcRunSec = new wxButton(m_rpRun, wxID_ANY, _("Run"), wxDefaultPosition, wxDLG_UNIT(m_rpRun, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_rcRunSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("CncRun")), wxLEFT);
    m_rcRunSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_rcRunSecFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_rcRunSec->SetFont(m_rcRunSecFont);
    
    flexGridSizer79->Add(m_rcRunSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_rcRunSec->SetMinSize(wxSize(-1,80));
    
    m_rcPauseSec = new wxButton(m_rpRun, wxID_ANY, _("Pause"), wxDefaultPosition, wxDLG_UNIT(m_rpRun, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_rcPauseSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("CncPause")), wxLEFT);
    m_rcPauseSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_rcPauseSecFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_rcPauseSec->SetFont(m_rcPauseSecFont);
    
    flexGridSizer79->Add(m_rcPauseSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_rcPauseSec->SetMinSize(wxSize(-1,80));
    
    m_rcStopSec = new wxButton(m_rpRun, wxID_ANY, _("Stop"), wxDefaultPosition, wxDLG_UNIT(m_rpRun, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_rcStopSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("CncStop")), wxLEFT);
    m_rcStopSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_rcStopSecFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_rcStopSec->SetFont(m_rcStopSecFont);
    
    flexGridSizer79->Add(m_rcStopSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_rcStopSec->SetMinSize(wxSize(-1,80));
    
    wxFlexGridSizer* flexGridSizer88 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer88->SetFlexibleDirection( wxBOTH );
    flexGridSizer88->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer88->AddGrowableCol(0);
    flexGridSizer88->AddGrowableRow(1);
    
    flexGridSizer77->Add(flexGridSizer88, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText90 = new wxStaticText(m_rpRun, wxID_ANY, _("Emergency Stop"), wxDefaultPosition, wxDLG_UNIT(m_rpRun, wxSize(-1,-1)), 0);
    m_staticText90->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_staticText90Font(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText90->SetFont(m_staticText90Font);
    
    flexGridSizer88->Add(m_staticText90, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(5));
    
    m_btnEmergenyStopSec = new wxButton(m_rpRun, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_rpRun, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btnEmergenyStopSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("emergengy_red_yellow")), wxLEFT);
    m_btnEmergenyStopSec->SetBitmapMargins(2,2);
    #endif
    m_btnEmergenyStopSec->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_btnEmergenyStopSecFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btnEmergenyStopSec->SetFont(m_btnEmergenyStopSecFont);
    
    flexGridSizer88->Add(m_btnEmergenyStopSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_rpMisc = new wxPanel(m_rightBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_rightBook->AddPage(m_rpMisc, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer121 = new wxFlexGridSizer(10, 1, 0, 0);
    flexGridSizer121->SetFlexibleDirection( wxBOTH );
    flexGridSizer121->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer121->AddGrowableCol(0);
    flexGridSizer121->AddGrowableRow(0);
    flexGridSizer121->AddGrowableRow(1);
    flexGridSizer121->AddGrowableRow(2);
    flexGridSizer121->AddGrowableRow(3);
    m_rpMisc->SetSizer(flexGridSizer121);
    
    m_btSessionDir = new wxButton(m_rpMisc, wxID_ANY, _("Open Session\nDirectory"), wxDefaultPosition, wxDLG_UNIT(m_rpMisc, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btSessionDir->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-find_in_files")), wxLEFT);
    m_btSessionDir->SetBitmapMargins(2,2);
    #endif
    wxFont m_btSessionDirFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btSessionDir->SetFont(m_btSessionDirFont);
    
    flexGridSizer121->Add(m_btSessionDir, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btTestFunct = new wxButton(m_rpMisc, wxID_ANY, _("Execute Test\nFunction"), wxDefaultPosition, wxDLG_UNIT(m_rpMisc, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btTestFunct->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("CncTest")), wxLEFT);
    m_btTestFunct->SetBitmapMargins(2,2);
    #endif
    wxFont m_btTestFunctFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btTestFunct->SetFont(m_btTestFunctFont);
    
    flexGridSizer121->Add(m_btTestFunct, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btStackTrace = new wxButton(m_rpMisc, wxID_ANY, _("Open Stack\nTrace Store"), wxDefaultPosition, wxDLG_UNIT(m_rpMisc, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStackTrace->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("trace")), wxLEFT);
    m_btStackTrace->SetBitmapMargins(2,2);
    #endif
    wxFont m_btStackTraceFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btStackTrace->SetFont(m_btStackTraceFont);
    
    flexGridSizer121->Add(m_btStackTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btAnchorSec = new wxButton(m_rpMisc, wxID_ANY, _("Determine\nAnchor\nPositions"), wxDefaultPosition, wxDLG_UNIT(m_rpMisc, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btAnchorSec->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("CncAnchors")), wxLEFT);
    m_btAnchorSec->SetBitmapMargins(2,2);
    #endif
    wxFont m_btAnchorSecFont(16, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_btAnchorSec->SetFont(m_btAnchorSecFont);
    
    flexGridSizer121->Add(m_btAnchorSec, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer3->Add(12, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    SetName(wxT("CncSecureCtrlPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_leftBook->Connect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(CncSecureCtrlPanelBase::onLeftBookPageChanged), NULL, this);
    m_btConnectSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onConnectSec), NULL, this);
    m_btResetSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onResetSec), NULL, this);
    m_btHardwareRefSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onEvaluateHardwareReference), NULL, this);
    m_btLoadTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onOpenTemplateSec), NULL, this);
    m_btZeroSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onSetReferencePosition), NULL, this);
    m_rcRunSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onRunSec), NULL, this);
    m_rcPauseSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onPauseSec), NULL, this);
    m_rcStopSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onStopSec), NULL, this);
    m_btnEmergenyStopSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onEmergencySec), NULL, this);
    m_btSessionDir->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onSessionDirSec), NULL, this);
    m_btTestFunct->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onTestFunctionSec), NULL, this);
    m_btStackTrace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onStackTraceStoreSec), NULL, this);
    m_btAnchorSec->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onDetermineAnchorPositionsSec), NULL, this);
    
}

CncSecureCtrlPanelBase::~CncSecureCtrlPanelBase()
{
    m_leftBook->Disconnect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(CncSecureCtrlPanelBase::onLeftBookPageChanged), NULL, this);
    m_btConnectSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onConnectSec), NULL, this);
    m_btResetSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onResetSec), NULL, this);
    m_btHardwareRefSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onEvaluateHardwareReference), NULL, this);
    m_btLoadTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onOpenTemplateSec), NULL, this);
    m_btZeroSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onSetReferencePosition), NULL, this);
    m_rcRunSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onRunSec), NULL, this);
    m_rcPauseSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onPauseSec), NULL, this);
    m_rcStopSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onStopSec), NULL, this);
    m_btnEmergenyStopSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onEmergencySec), NULL, this);
    m_btSessionDir->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onSessionDirSec), NULL, this);
    m_btTestFunct->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onTestFunctionSec), NULL, this);
    m_btStackTrace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onStackTraceStoreSec), NULL, this);
    m_btAnchorSec->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureCtrlPanelBase::onDetermineAnchorPositionsSec), NULL, this);
    
}

CncSecureManuallyMovePanelBase::CncSecureManuallyMovePanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC6911InitBitmapResources();
        bBitmapLoaded = true;
    }
    this->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    wxFlexGridSizer* flexGridSizer143 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer143->SetFlexibleDirection( wxBOTH );
    flexGridSizer143->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer143->AddGrowableCol(0);
    flexGridSizer143->AddGrowableRow(0);
    flexGridSizer143->AddGrowableRow(2);
    this->SetSizer(flexGridSizer143);
    
    wxFlexGridSizer* flexGridSizerResult = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizerResult->SetFlexibleDirection( wxBOTH );
    flexGridSizerResult->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerResult->AddGrowableCol(0);
    flexGridSizerResult->AddGrowableRow(0);
    flexGridSizerResult->AddGrowableRow(1);
    flexGridSizerResult->AddGrowableRow(2);
    flexGridSizerResult->AddGrowableRow(3);
    
    flexGridSizer143->Add(flexGridSizerResult, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizerRx = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizerRx->SetFlexibleDirection( wxBOTH );
    flexGridSizerRx->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerRx->AddGrowableCol(1);
    flexGridSizerRx->AddGrowableRow(0);
    
    flexGridSizerResult->Add(flexGridSizerRx, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btX = new wxToggleButton(this, wxID_ANY, _("x"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(58,58)), 0);
    wxFont m_btXFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btX->SetFont(m_btXFont);
    m_btX->SetValue(true);
    
    flexGridSizerRx->Add(m_btX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_btX->SetMinSize(wxSize(58,58));
    
    m_valueX = new wxTextCtrl(this, wxID_ANY, wxT("+1.559"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_valueX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_valueX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_valueXFont(20, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_valueX->SetFont(m_valueXFont);
    #if wxVERSION_NUMBER >= 3000
    m_valueX->SetHint(wxT(""));
    #endif
    
    flexGridSizerRx->Add(m_valueX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_valueX->SetMinSize(wxSize(-1,40));
    
    m_unitX = new wxTextCtrl(this, wxID_ANY, wxT("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(66,-1)), wxTE_WORDWRAP|wxTE_RIGHT|wxTE_READONLY|wxTE_NO_VSCROLL|wxTE_CENTRE|wxBORDER_NONE);
    m_unitX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_unitX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_unitXFont(16, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_unitX->SetFont(m_unitXFont);
    #if wxVERSION_NUMBER >= 3000
    m_unitX->SetHint(wxT(""));
    #endif
    
    flexGridSizerRx->Add(m_unitX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_unitX->SetMinSize(wxSize(66,-1));
    
    wxFlexGridSizer* flexGridSizerRy = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizerRy->SetFlexibleDirection( wxBOTH );
    flexGridSizerRy->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerRy->AddGrowableCol(1);
    flexGridSizerRy->AddGrowableRow(0);
    
    flexGridSizerResult->Add(flexGridSizerRy, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btY = new wxToggleButton(this, wxID_ANY, _("y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(58,58)), 0);
    wxFont m_btYFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btY->SetFont(m_btYFont);
    m_btY->SetValue(true);
    
    flexGridSizerRy->Add(m_btY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_btY->SetMinSize(wxSize(58,58));
    
    m_valueY = new wxTextCtrl(this, wxID_ANY, wxT("+166.556"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_RIGHT|wxTE_READONLY|wxTE_NO_VSCROLL|wxBORDER_NONE);
    m_valueY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_valueY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_valueYFont(20, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_valueY->SetFont(m_valueYFont);
    #if wxVERSION_NUMBER >= 3000
    m_valueY->SetHint(wxT(""));
    #endif
    
    flexGridSizerRy->Add(m_valueY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_valueY->SetMinSize(wxSize(-1,40));
    
    m_unitY = new wxTextCtrl(this, wxID_ANY, wxT("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(66,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_unitY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_unitY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_unitYFont(16, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_unitY->SetFont(m_unitYFont);
    #if wxVERSION_NUMBER >= 3000
    m_unitY->SetHint(wxT(""));
    #endif
    
    flexGridSizerRy->Add(m_unitY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_unitY->SetMinSize(wxSize(66,-1));
    
    wxFlexGridSizer* flexGridSizerRz = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizerRz->SetFlexibleDirection( wxBOTH );
    flexGridSizerRz->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerRz->AddGrowableCol(1);
    flexGridSizerRz->AddGrowableRow(0);
    
    flexGridSizerResult->Add(flexGridSizerRz, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btZ = new wxToggleButton(this, wxID_ANY, _("z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(58,58)), 0);
    wxFont m_btZFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btZ->SetFont(m_btZFont);
    m_btZ->SetValue(true);
    
    flexGridSizerRz->Add(m_btZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_btZ->SetMinSize(wxSize(58,58));
    
    m_valueZ = new wxTextCtrl(this, wxID_ANY, wxT("-0.665"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_RIGHT|wxTE_READONLY|wxTE_NO_VSCROLL|wxBORDER_NONE);
    m_valueZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_valueZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_valueZFont(20, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_valueZ->SetFont(m_valueZFont);
    #if wxVERSION_NUMBER >= 3000
    m_valueZ->SetHint(wxT(""));
    #endif
    
    flexGridSizerRz->Add(m_valueZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_valueZ->SetMinSize(wxSize(-1,40));
    
    m_unitZ = new wxTextCtrl(this, wxID_ANY, wxT("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(66,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_unitZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_unitZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_unitZFont(16, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_unitZ->SetFont(m_unitZFont);
    #if wxVERSION_NUMBER >= 3000
    m_unitZ->SetHint(wxT(""));
    #endif
    
    flexGridSizerRz->Add(m_unitZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_unitZ->SetMinSize(wxSize(66,-1));
    
    wxFlexGridSizer* flexGridSizerRf = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizerRf->SetFlexibleDirection( wxBOTH );
    flexGridSizerRf->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerRf->AddGrowableCol(1);
    flexGridSizerRf->AddGrowableRow(0);
    
    flexGridSizerResult->Add(flexGridSizerRf, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btF = new wxToggleButton(this, wxID_ANY, _("F"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(58,58)), 0);
    wxFont m_btFFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btF->SetFont(m_btFFont);
    m_btF->SetValue(true);
    
    flexGridSizerRf->Add(m_btF, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_btF->SetMinSize(wxSize(58,58));
    
    m_valueF = new wxTextCtrl(this, wxID_ANY, wxT("11900.8"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_RIGHT|wxTE_READONLY|wxTE_NO_VSCROLL|wxBORDER_NONE);
    m_valueF->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    m_valueF->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_valueFFont(20, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_valueF->SetFont(m_valueFFont);
    #if wxVERSION_NUMBER >= 3000
    m_valueF->SetHint(wxT(""));
    #endif
    
    flexGridSizerRf->Add(m_valueF, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_valueF->SetMinSize(wxSize(-1,40));
    
    m_unitF = new wxTextCtrl(this, wxID_ANY, wxT("mm\nmin"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(66,-1)), wxTE_READONLY|wxTE_NO_VSCROLL|wxTE_MULTILINE|wxTE_CENTRE|wxBORDER_NONE);
    m_unitF->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_unitF->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_unitFFont(16, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Courier New"));
    m_unitF->SetFont(m_unitFFont);
    
    flexGridSizerRf->Add(m_unitF, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_unitF->SetMinSize(wxSize(66,-1));
    
    m_staticLine2823 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer143->Add(m_staticLine2823, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer322 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer322->SetFlexibleDirection( wxBOTH );
    flexGridSizer322->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer322->AddGrowableCol(3);
    flexGridSizer322->AddGrowableRow(0);
    
    flexGridSizer143->Add(flexGridSizer322, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_bt1D = new wxToggleButton(this, wxID_ANY, _("1D"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_bt1DFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt1D->SetFont(m_bt1DFont);
    m_bt1D->SetValue(false);
    
    flexGridSizer322->Add(m_bt1D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt1D->SetMinSize(wxSize(60,-1));
    
    m_bt2D = new wxToggleButton(this, wxID_ANY, _("2D"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_bt2DFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt2D->SetFont(m_bt2DFont);
    m_bt2D->SetValue(true);
    
    flexGridSizer322->Add(m_bt2D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt2D->SetMinSize(wxSize(60,-1));
    
    m_bt3D = new wxToggleButton(this, wxID_ANY, _("3D"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_bt3DFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt3D->SetFont(m_bt3DFont);
    m_bt3D->SetValue(false);
    
    flexGridSizer322->Add(m_bt3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt3D->SetMinSize(wxSize(60,-1));
    
    m_btMove = new wxButton(this, wxID_ANY, _("Move"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,50)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btMove->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("edit-move")), wxLEFT);
    m_btMove->SetBitmapMargins(2,2);
    #endif
    m_btMove->SetBackgroundColour(wxColour(wxT("rgb(0,64,128)")));
    m_btMove->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_btMoveFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btMove->SetFont(m_btMoveFont);
    
    flexGridSizer322->Add(m_btMove, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btMove->SetMinSize(wxSize(-1,50));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    SetName(wxT("CncSecureManuallyMovePanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_btX->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueX->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearX), NULL, this);
    m_valueX->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_btY->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueY->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearY), NULL, this);
    m_valueY->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_btZ->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueZ->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearZ), NULL, this);
    m_valueZ->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_btF->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueF->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_valueF->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearF), NULL, this);
    m_bt1D->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onSetDimMode), NULL, this);
    m_bt2D->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onSetDimMode), NULL, this);
    m_bt3D->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onSetDimMode), NULL, this);
    m_btMove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onMove), NULL, this);
    
}

CncSecureManuallyMovePanelBase::~CncSecureManuallyMovePanelBase()
{
    m_btX->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueX->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearX), NULL, this);
    m_valueX->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_btY->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueY->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearY), NULL, this);
    m_valueY->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_btZ->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueZ->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearZ), NULL, this);
    m_valueZ->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_btF->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onAxis), NULL, this);
    m_valueF->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onLeftDownResultValue), NULL, this);
    m_valueF->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncSecureManuallyMovePanelBase::onClearF), NULL, this);
    m_bt1D->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onSetDimMode), NULL, this);
    m_bt2D->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onSetDimMode), NULL, this);
    m_bt3D->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onSetDimMode), NULL, this);
    m_btMove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureManuallyMovePanelBase::onMove), NULL, this);
    
}

CncSecureNumpadBase::CncSecureNumpadBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC6911InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer371 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer371->SetFlexibleDirection( wxBOTH );
    flexGridSizer371->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer371->AddGrowableCol(0);
    flexGridSizer371->AddGrowableRow(0);
    flexGridSizer371->AddGrowableRow(1);
    this->SetSizer(flexGridSizer371);
    
    wxFlexGridSizer* flexGridSizer373 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer373->SetFlexibleDirection( wxBOTH );
    flexGridSizer373->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer373->AddGrowableCol(0);
    flexGridSizer373->AddGrowableCol(1);
    flexGridSizer373->AddGrowableCol(2);
    flexGridSizer373->AddGrowableRow(0);
    
    flexGridSizer371->Add(flexGridSizer373, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_infoText = new wxStaticText(this, wxID_ANY, _("Info:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_infoTextFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_infoText->SetFont(m_infoTextFont);
    
    flexGridSizer373->Add(m_infoText, 0, wxALL, WXC_FROM_DIP(5));
    
    m_signValue = new wxTextCtrl(this, wxID_ANY, wxT("+"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    wxFont m_signValueFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signValue->SetFont(m_signValueFont);
    #if wxVERSION_NUMBER >= 3000
    m_signValue->SetHint(wxT(""));
    #endif
    
    flexGridSizer373->Add(m_signValue, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_textResult = new wxTextCtrl(this, wxID_ANY, wxT("234434.789"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxBORDER_NONE);
    wxFont m_textResultFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_textResult->SetFont(m_textResultFont);
    #if wxVERSION_NUMBER >= 3000
    m_textResult->SetHint(wxT(""));
    #endif
    
    flexGridSizer373->Add(m_textResult, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxGridSizer* gridSizerNumbers = new wxGridSizer(4, 4, 0, 0);
    
    flexGridSizer371->Add(gridSizerNumbers, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_bt7 = new wxButton(this, wxID_ANY, _("7"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt7->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt7Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt7->SetFont(m_bt7Font);
    
    gridSizerNumbers->Add(m_bt7, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt7->SetMinSize(wxSize(60,60));
    
    m_bt8 = new wxButton(this, wxID_ANY, _("8"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt8->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt8Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt8->SetFont(m_bt8Font);
    
    gridSizerNumbers->Add(m_bt8, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt8->SetMinSize(wxSize(60,60));
    
    m_bt9 = new wxButton(this, wxID_ANY, _("9"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt9->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt9Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt9->SetFont(m_bt9Font);
    
    gridSizerNumbers->Add(m_bt9, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt9->SetMinSize(wxSize(60,60));
    
    m_btLeft = new wxButton(this, wxID_ANY, _("<"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_btLeft->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_btLeftFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btLeft->SetFont(m_btLeftFont);
    m_btLeft->SetToolTip(_("Left"));
    
    gridSizerNumbers->Add(m_btLeft, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btLeft->SetMinSize(wxSize(60,60));
    
    m_bt4 = new wxButton(this, wxID_ANY, _("4"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt4->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt4Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt4->SetFont(m_bt4Font);
    
    gridSizerNumbers->Add(m_bt4, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt4->SetMinSize(wxSize(60,60));
    
    m_bt5 = new wxButton(this, wxID_ANY, _("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt5->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt5Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt5->SetFont(m_bt5Font);
    
    gridSizerNumbers->Add(m_bt5, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt5->SetMinSize(wxSize(60,60));
    
    m_bt6 = new wxButton(this, wxID_ANY, _("6"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt6->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt6Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt6->SetFont(m_bt6Font);
    
    gridSizerNumbers->Add(m_bt6, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt6->SetMinSize(wxSize(60,60));
    
    m_btRight = new wxButton(this, wxID_ANY, _(">"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_btRight->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_btRightFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btRight->SetFont(m_btRightFont);
    m_btRight->SetToolTip(_("Right"));
    
    gridSizerNumbers->Add(m_btRight, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btRight->SetMinSize(wxSize(60,60));
    
    m_bt3 = new wxButton(this, wxID_ANY, _("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt3->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt3Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt3->SetFont(m_bt3Font);
    
    gridSizerNumbers->Add(m_bt3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt3->SetMinSize(wxSize(60,60));
    
    m_bt2 = new wxButton(this, wxID_ANY, _("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt2->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt2Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt2->SetFont(m_bt2Font);
    
    gridSizerNumbers->Add(m_bt2, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt2->SetMinSize(wxSize(60,60));
    
    m_bt1 = new wxButton(this, wxID_ANY, _("3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt1->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt1Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt1->SetFont(m_bt1Font);
    
    gridSizerNumbers->Add(m_bt1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt1->SetMinSize(wxSize(60,60));
    
    m_btClear = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("24-clean")), wxLEFT);
    m_btClear->SetBitmapMargins(2,2);
    #endif
    m_btClear->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_btClearFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btClear->SetFont(m_btClearFont);
    m_btClear->SetToolTip(_("Clear"));
    
    gridSizerNumbers->Add(m_btClear, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btClear->SetMinSize(wxSize(60,60));
    
    m_bt0 = new wxButton(this, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_bt0->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    wxFont m_bt0Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_bt0->SetFont(m_bt0Font);
    
    gridSizerNumbers->Add(m_bt0, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_bt0->SetMinSize(wxSize(60,60));
    
    m_btDot = new wxButton(this, wxID_ANY, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_btDot->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_btDotFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btDot->SetFont(m_btDotFont);
    
    gridSizerNumbers->Add(m_btDot, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btDot->SetMinSize(wxSize(60,60));
    
    m_btSign = new wxButton(this, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_btSign->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_btSignFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btSign->SetFont(m_btSignFont);
    
    gridSizerNumbers->Add(m_btSign, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btSign->SetMinSize(wxSize(60,60));
    
    m_btBks = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btBks->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clear@2x")), wxLEFT);
    m_btBks->SetBitmapMargins(2,2);
    #endif
    m_btBks->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_btBksFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btBks->SetFont(m_btBksFont);
    m_btBks->SetToolTip(_("Backspace"));
    
    gridSizerNumbers->Add(m_btBks, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btBks->SetMinSize(wxSize(60,60));
    
    SetName(wxT("CncSecureNumpadBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_textResult->Connect(wxEVT_CHAR, wxKeyEventHandler(CncSecureNumpadBase::onCharResult), NULL, this);
    m_textResult->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(CncSecureNumpadBase::onTextUpdatedResult), NULL, this);
    m_textResult->Connect(wxEVT_CONTEXT_MENU, wxContextMenuEventHandler(CncSecureNumpadBase::onContextMenuResult), NULL, this);
    m_bt7->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt8->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt9->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btLeft->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onLeft), NULL, this);
    m_bt4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt5->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt6->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btRight->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onRight), NULL, this);
    m_bt3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onClear), NULL, this);
    m_bt0->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btDot->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btSign->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onSign), NULL, this);
    m_btBks->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onBackspace), NULL, this);
    
}

CncSecureNumpadBase::~CncSecureNumpadBase()
{
    m_textResult->Disconnect(wxEVT_CHAR, wxKeyEventHandler(CncSecureNumpadBase::onCharResult), NULL, this);
    m_textResult->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(CncSecureNumpadBase::onTextUpdatedResult), NULL, this);
    m_textResult->Disconnect(wxEVT_CONTEXT_MENU, wxContextMenuEventHandler(CncSecureNumpadBase::onContextMenuResult), NULL, this);
    m_bt7->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt8->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt9->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btLeft->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onLeft), NULL, this);
    m_bt4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt5->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt6->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btRight->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onRight), NULL, this);
    m_bt3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_bt1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onClear), NULL, this);
    m_bt0->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btDot->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onNumber), NULL, this);
    m_btSign->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onSign), NULL, this);
    m_btBks->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadBase::onBackspace), NULL, this);
    
}

CncSecureSlidepadBase::CncSecureSlidepadBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC6911InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer397 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer397->SetFlexibleDirection( wxBOTH );
    flexGridSizer397->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer397->AddGrowableCol(0);
    flexGridSizer397->AddGrowableRow(1);
    this->SetSizer(flexGridSizer397);
    
    wxFlexGridSizer* flexGridSizer373 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer373->SetFlexibleDirection( wxBOTH );
    flexGridSizer373->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer373->AddGrowableCol(0);
    flexGridSizer373->AddGrowableCol(1);
    flexGridSizer373->AddGrowableRow(0);
    
    flexGridSizer397->Add(flexGridSizer373, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_infoText = new wxStaticText(this, wxID_ANY, _("Info:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_infoTextFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_infoText->SetFont(m_infoTextFont);
    
    flexGridSizer373->Add(m_infoText, 0, wxALL, WXC_FROM_DIP(5));
    
    m_textResult = new wxTextCtrl(this, wxID_ANY, wxT("234434.789"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_textResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_textResultFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_textResult->SetFont(m_textResultFont);
    #if wxVERSION_NUMBER >= 3000
    m_textResult->SetHint(wxT(""));
    #endif
    
    flexGridSizer373->Add(m_textResult, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_scrollbar = new wxScrollBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSB_HORIZONTAL);
    m_scrollbar->SetScrollbar(0, 1, 10, 1);
    
    flexGridSizer397->Add(m_scrollbar, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_scrollbar->SetMinSize(wxSize(-1,80));
    
    SetName(wxT("CncSecureSlidepadBase"));
    SetMinClientSize(wxSize(500,140));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_scrollbar->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_LINEUP, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_PAGEUP, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_BOTTOM, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Connect(wxEVT_SCROLL_TOP, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    
}

CncSecureSlidepadBase::~CncSecureSlidepadBase()
{
    m_scrollbar->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_LINEUP, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_PAGEUP, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_BOTTOM, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    m_scrollbar->Disconnect(wxEVT_SCROLL_TOP, wxScrollEventHandler(CncSecureSlidepadBase::onScrollChanged), NULL, this);
    
}

CncSecureNumpadDialogBase::CncSecureNumpadDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC6911InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("keyboard"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer379 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer379->SetFlexibleDirection( wxBOTH );
    flexGridSizer379->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer379->AddGrowableCol(0);
    flexGridSizer379->AddGrowableRow(0);
    flexGridSizer379->SetMinSize(400,400);
    this->SetSizer(flexGridSizer379);
    
    m_numpadPlaceholder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_numpadPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer379->Add(m_numpadPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine383 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer379->Add(m_staticLine383, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer422 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer422->SetFlexibleDirection( wxBOTH );
    flexGridSizer422->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer379->Add(flexGridSizer422, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_btCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCancel->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("close-16")), wxLEFT);
    m_btCancel->SetBitmapMargins(2,2);
    #endif
    wxFont m_btCancelFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btCancel->SetFont(m_btCancelFont);
    
    flexGridSizer422->Add(m_btCancel, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_btCancel->SetMinSize(wxSize(120,60));
    
    m_btOk = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btOk->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("abb-import")), wxLEFT);
    m_btOk->SetBitmapMargins(2,2);
    #endif
    wxFont m_btOkFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btOk->SetFont(m_btOkFont);
    
    flexGridSizer422->Add(m_btOk, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_btOk->SetMinSize(wxSize(120,60));
    
    SetName(wxT("CncSecureNumpadDialogBase"));
    SetMinClientSize(wxSize(400,400));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncSecureNumpadDialogBase::onCloseWindow), NULL, this);
    m_btCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadDialogBase::onCancel), NULL, this);
    m_btOk->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadDialogBase::onOk), NULL, this);
    
}

CncSecureNumpadDialogBase::~CncSecureNumpadDialogBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncSecureNumpadDialogBase::onCloseWindow), NULL, this);
    m_btCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadDialogBase::onCancel), NULL, this);
    m_btOk->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureNumpadDialogBase::onOk), NULL, this);
    
}

CncSecureSlidepadDialogBase::CncSecureSlidepadDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC6911InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("iconmonstr-control-panel-8-16"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer379 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer379->SetFlexibleDirection( wxBOTH );
    flexGridSizer379->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer379->AddGrowableCol(0);
    flexGridSizer379->AddGrowableRow(0);
    flexGridSizer379->SetMinSize(500,220);
    this->SetSizer(flexGridSizer379);
    
    m_slidepadPlaceholder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_slidepadPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer379->Add(m_slidepadPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine383 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer379->Add(m_staticLine383, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer421 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer421->SetFlexibleDirection( wxBOTH );
    flexGridSizer421->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer379->Add(flexGridSizer421, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_btCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCancel->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("close-16")), wxLEFT);
    m_btCancel->SetBitmapMargins(2,2);
    #endif
    wxFont m_btCancelFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btCancel->SetFont(m_btCancelFont);
    
    flexGridSizer421->Add(m_btCancel, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_btCancel->SetMinSize(wxSize(120,60));
    
    m_btOk = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btOk->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("abb-import")), wxLEFT);
    m_btOk->SetBitmapMargins(2,2);
    #endif
    wxFont m_btOkFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btOk->SetFont(m_btOkFont);
    
    flexGridSizer421->Add(m_btOk, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_btOk->SetMinSize(wxSize(120,60));
    
    SetName(wxT("CncSecureSlidepadDialogBase"));
    SetMinClientSize(wxSize(500,200));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncSecureSlidepadDialogBase::onCloseWindow), NULL, this);
    m_btCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureSlidepadDialogBase::onCancel), NULL, this);
    m_btOk->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureSlidepadDialogBase::onOk), NULL, this);
    
}

CncSecureSlidepadDialogBase::~CncSecureSlidepadDialogBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncSecureSlidepadDialogBase::onCloseWindow), NULL, this);
    m_btCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureSlidepadDialogBase::onCancel), NULL, this);
    m_btOk->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureSlidepadDialogBase::onOk), NULL, this);
    
}
