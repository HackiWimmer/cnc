#include "ManuallyParser.h"

/////////////////////////////////////////////////////////////
ManuallyParser::ManuallyParser(ManuallyPathHandlerCnc* ph)
: FileParser("")
, pathHandler(ph)
, moves()
, toolId(-1)
/////////////////////////////////////////////////////////////
{
}
/////////////////////////////////////////////////////////////
ManuallyParser::~ManuallyParser() {
/////////////////////////////////////////////////////////////
	reset();
}
/////////////////////////////////////////////////////////////
void ManuallyParser::reset() {
/////////////////////////////////////////////////////////////
	CncDoublePosition pos(0.0, 0.0, 0.0 );
	reset(pos);
}
/////////////////////////////////////////////////////////////
void ManuallyParser::reset(const CncDoublePosition& pos) {
/////////////////////////////////////////////////////////////
	moves.clear();
	setupToolId(-1);
	initCurrentPos(pos);
}
/////////////////////////////////////////////////////////////
void ManuallyParser::setupToolId(int id) {
/////////////////////////////////////////////////////////////
	toolId = id;
}
/////////////////////////////////////////////////////////////
void ManuallyParser::addMove(const CncMoveDefinition& md) {
/////////////////////////////////////////////////////////////
	moves.push_back(md);
}
/////////////////////////////////////////////////////////////
bool ManuallyParser::preprocess() {
/////////////////////////////////////////////////////////////
	// currently nothing todo
	return true;
}
/////////////////////////////////////////////////////////////
bool ManuallyParser::spool() {
/////////////////////////////////////////////////////////////
	long clientId = 1;
	for ( auto it = moves.begin(); it != moves.end(); ++it ) 
	{
		initNextClientId(CLIENT_ID.TPL_FACTOR * clientId++);
		
		if ( pathHandler->processLinearMove(*it) == false )
			return false;
	}
	
	return true;
}
/////////////////////////////////////////////////////////////
bool ManuallyParser::postprocess() {
/////////////////////////////////////////////////////////////
	// currently nothing todo
	return true;
}
/////////////////////////////////////////////////////////////
void ManuallyParser::initNextClientId(long id) {
/////////////////////////////////////////////////////////////
	wxASSERT(pathHandler);
	pathHandler->initNextClientId(id);
}
/////////////////////////////////////////////////////////////
void ManuallyParser::logMeasurementStart() {
/////////////////////////////////////////////////////////////
	wxASSERT(pathHandler);
	pathHandler->logMeasurementStart();
}
/////////////////////////////////////////////////////////////
void ManuallyParser::logMeasurementEnd() {
/////////////////////////////////////////////////////////////
	wxASSERT(pathHandler);
	pathHandler->logMeasurementEnd();
}
