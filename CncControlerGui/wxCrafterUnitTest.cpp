//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterUnitTest.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterUnitTest.h"

// Declare the bitmap loading function
extern void wxC83AAInitBitmapResources();

static bool bBitmapLoaded = false;

CncUnitTestsBase::CncUnitTestsBase(wxWindow* parent,
    wxWindowID id,
    const wxString& title,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
	// We need to initialise the default bitmap handler
	wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
	wxC83AAInitBitmapResources();
	bBitmapLoaded = true;
    }

    wxFlexGridSizer* flexGridSizer3344 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3344->SetFlexibleDirection(wxBOTH);
    flexGridSizer3344->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3344->AddGrowableCol(0);
    flexGridSizer3344->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3344);

    wxFlexGridSizer* flexGridSizer3355 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer3355->SetFlexibleDirection(wxBOTH);
    flexGridSizer3355->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3355->AddGrowableCol(1);
    flexGridSizer3355->AddGrowableRow(0);

    flexGridSizer3344->Add(flexGridSizer3355, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_staticText3357 =
        new wxStaticText(this, wxID_ANY, _("Tests:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText3357Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText3357Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText3357->SetFont(m_staticText3357Font);

    flexGridSizer3355->Add(m_staticText3357, 0, wxALL, WXC_FROM_DIP(5));

    wxArrayString m_unitTestSelectorArr;
    m_unitTestSelector = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
        m_unitTestSelectorArr, wxCB_READONLY);

    flexGridSizer3355->Add(m_unitTestSelector, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_btUnitTestClear =
        new wxButton(this, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, 28)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btUnitTestClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btUnitTestClear->SetBitmapMargins(2, 2);
#endif

    flexGridSizer3355->Add(m_btUnitTestClear, 0, wxALL, WXC_FROM_DIP(0));
    m_btUnitTestClear->SetMinSize(wxSize(-1, 28));

    m_btUnitTestRun =
        new wxButton(this, wxID_ANY, _("Run . . ."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, 28)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btUnitTestRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-dll")), wxLEFT);
    m_btUnitTestRun->SetBitmapMargins(2, 2);
#endif
    m_btUnitTestRun->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_btUnitTestRunFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_btUnitTestRunFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_btUnitTestRun->SetFont(m_btUnitTestRunFont);

    flexGridSizer3355->Add(m_btUnitTestRun, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(0));
    m_btUnitTestRun->SetMinSize(wxSize(-1, 28));

    m_testResultStreamPlaceholder =
        new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
            wxTE_RICH2 | wxTE_READONLY | wxTE_MULTILINE | wxALWAYS_SHOW_SB | wxHSCROLL | wxVSCROLL);
    m_testResultStreamPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_testResultStreamPlaceholder->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_testResultStreamPlaceholderFont(
        10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_testResultStreamPlaceholder->SetFont(m_testResultStreamPlaceholderFont);

    flexGridSizer3344->Add(m_testResultStreamPlaceholder, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizer3370 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer3370->SetFlexibleDirection(wxBOTH);
    flexGridSizer3370->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3370->AddGrowableCol(0);
    flexGridSizer3370->AddGrowableRow(0);

    flexGridSizer3344->Add(flexGridSizer3370, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_unitTestStatus =
        new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, 20)), 0);
    wxFont m_unitTestStatusFont(
        10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_unitTestStatus->SetFont(m_unitTestStatusFont);

    flexGridSizer3370->Add(m_unitTestStatus, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));
    m_unitTestStatus->SetMinSize(wxSize(-1, 20));

    m_unitTestFreezeOutput =
        new wxCheckBox(this, wxID_ANY, _("Freeze"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_unitTestFreezeOutput->SetValue(false);
    m_unitTestFreezeOutput->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_unitTestFreezeOutputFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_unitTestFreezeOutputFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_unitTestFreezeOutput->SetFont(m_unitTestFreezeOutputFont);
    m_unitTestFreezeOutput->SetToolTip(_("Freeze output while running"));

    flexGridSizer3370->Add(m_unitTestFreezeOutput, 0, wxALL, WXC_FROM_DIP(5));

    m_unitTestAutoRun =
        new wxCheckBox(this, wxID_ANY, _("Auto Run"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_unitTestAutoRun->SetValue(true);
    m_unitTestAutoRun->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_unitTestAutoRunFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_unitTestAutoRunFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_unitTestAutoRun->SetFont(m_unitTestAutoRunFont);
    m_unitTestAutoRun->SetToolTip(_("Run directly on select a test"));

    flexGridSizer3370->Add(m_unitTestAutoRun, 0, wxALL, WXC_FROM_DIP(5));

    m_unitTestStartupTimer = new wxTimer;
    m_unitTestStartupTimer->Start(300, true);

    SetName(wxT("CncUnitTestsBase"));
    SetMinClientSize(wxSize(300, 300));
    SetSize(wxDLG_UNIT(this, wxSize(800, 600)));
    if(GetSizer()) {
	GetSizer()->Fit(this);
    }
    if(GetParent()) {
	CentreOnParent(wxBOTH);
    } else {
	CentreOnScreen(wxBOTH);
    }
    if(!wxPersistenceManager::Get().Find(this)) {
	wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
	wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    this->Bind(wxEVT_SHOW, &CncUnitTestsBase::onShow, this);
    m_unitTestSelector->Bind(wxEVT_COMMAND_COMBOBOX_SELECTED, &CncUnitTestsBase::selectTest, this);
    m_btUnitTestClear->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncUnitTestsBase::clearView, this);
    m_unitTestStartupTimer->Bind(wxEVT_TIMER, &CncUnitTestsBase::onStartupTimer, this);
}

CncUnitTestsBase::~CncUnitTestsBase()
{
    this->Unbind(wxEVT_SHOW, &CncUnitTestsBase::onShow, this);
    m_unitTestSelector->Unbind(wxEVT_COMMAND_COMBOBOX_SELECTED, &CncUnitTestsBase::selectTest, this);
    m_btUnitTestClear->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncUnitTestsBase::clearView, this);
    m_unitTestStartupTimer->Unbind(wxEVT_TIMER, &CncUnitTestsBase::onStartupTimer, this);

    m_unitTestStartupTimer->Stop();
    wxDELETE(m_unitTestStartupTimer);
}

CncTestRunConfigBase::CncTestRunConfigBase(wxWindow* parent,
    wxWindowID id,
    const wxString& title,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
	// We need to initialise the default bitmap handler
	wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
	wxC83AAInitBitmapResources();
	bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
	wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("software-update-available-3 (2)"));
	wxIcon icn;
	icn.CopyFromBitmap(iconBmp);
	app_icons.AddIcon(icn);
    }
    SetIcons(app_icons);

    wxFlexGridSizer* flexGridSizer20 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer20->SetFlexibleDirection(wxBOTH);
    flexGridSizer20->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer20->AddGrowableCol(0);
    flexGridSizer20->AddGrowableRow(0);
    flexGridSizer20->SetMinSize(500, 300);
    this->SetSizer(flexGridSizer20);

    wxFlexGridSizer* flexGridSizer21 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer21->SetFlexibleDirection(wxBOTH);
    flexGridSizer21->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer21->AddGrowableCol(0);
    flexGridSizer21->AddGrowableRow(0);

    flexGridSizer20->Add(flexGridSizer21, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_lbTestCase = new wxListbook(
        this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLB_DEFAULT | wxBK_DEFAULT);
    m_lbTestCase->SetName(wxT("m_lbTestCase"));
    wxImageList* m_lbTestCase_il = new wxImageList(16, 16);
    m_lbTestCase->AssignImageList(m_lbTestCase_il);

    flexGridSizer21->Add(m_lbTestCase, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_plLoop = new wxPanel(
        m_lbTestCase, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_lbTestCase, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    int m_plLoopImgIndex;
    m_plLoopImgIndex = m_lbTestCase_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("ConConnected")));
    m_lbTestCase->AddPage(m_plLoop, _("Loop\nCurrent Template"), false, m_plLoopImgIndex);

    wxFlexGridSizer* flexGridSizer30 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer30->SetFlexibleDirection(wxBOTH);
    flexGridSizer30->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer30->AddGrowableCol(0);
    m_plLoop->SetSizer(flexGridSizer30);

    wxFlexGridSizer* flexGridSizer341 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer341->SetFlexibleDirection(wxBOTH);
    flexGridSizer341->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer341->AddGrowableCol(1);

    flexGridSizer30->Add(flexGridSizer341, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText352 = new wxStaticText(
        m_plLoop, wxID_ANY, _("Loop Count:"), wxDefaultPosition, wxDLG_UNIT(m_plLoop, wxSize(-1, -1)), 0);
    wxFont m_staticText352Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText352->SetFont(m_staticText352Font);

    flexGridSizer341->Add(m_staticText352, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));
    m_staticText352->SetMinSize(wxSize(180, -1));

    m_loopCount = new wxSpinCtrl(
        m_plLoop, wxID_ANY, wxT("3"), wxDefaultPosition, wxDLG_UNIT(m_plLoop, wxSize(-1, -1)), wxSP_ARROW_KEYS);
    m_loopCount->SetRange(1, 100);
    m_loopCount->SetValue(3);

    flexGridSizer341->Add(m_loopCount, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer34 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer34->SetFlexibleDirection(wxBOTH);
    flexGridSizer34->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer30->Add(flexGridSizer34, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText35 = new wxStaticText(m_plLoop, wxID_ANY, _("Use existing CncInstruction:"), wxDefaultPosition,
        wxDLG_UNIT(m_plLoop, wxSize(-1, -1)), 0);
    wxFont m_staticText35Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText35->SetFont(m_staticText35Font);

    flexGridSizer34->Add(m_staticText35, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText35->SetMinSize(wxSize(180, -1));

    m_cbUseCncInstructions =
        new wxCheckBox(m_plLoop, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_plLoop, wxSize(-1, -1)), 0);
    m_cbUseCncInstructions->SetValue(true);

    flexGridSizer34->Add(m_cbUseCncInstructions, 0, wxALL, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer341xx = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer341xx->SetFlexibleDirection(wxBOTH);
    flexGridSizer341xx->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer30->Add(flexGridSizer341xx, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText35244 = new wxStaticText(
        m_plLoop, wxID_ANY, _("Break on Error:"), wxDefaultPosition, wxDLG_UNIT(m_plLoop, wxSize(-1, -1)), 0);
    wxFont m_staticText35244Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText35244->SetFont(m_staticText35244Font);

    flexGridSizer341xx->Add(m_staticText35244, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText35244->SetMinSize(wxSize(180, -1));

    m_cbBreakOnError =
        new wxCheckBox(m_plLoop, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_plLoop, wxSize(-1, -1)), 0);
    m_cbBreakOnError->SetValue(true);

    flexGridSizer341xx->Add(m_cbBreakOnError, 0, wxALL, WXC_FROM_DIP(5));

    m_plDir = new wxPanel(
        m_lbTestCase, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_lbTestCase, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    int m_plDirImgIndex;
    m_plDirImgIndex = m_lbTestCase_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("CncFolder")));
    m_lbTestCase->AddPage(m_plDir, _("Process\nDirectory"), false, m_plDirImgIndex);

    wxFlexGridSizer* flexGridSizer31 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer31->SetFlexibleDirection(wxBOTH);
    flexGridSizer31->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer31->AddGrowableCol(0);
    m_plDir->SetSizer(flexGridSizer31);

    wxFlexGridSizer* flexGridSizer50 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer50->SetFlexibleDirection(wxBOTH);
    flexGridSizer50->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer50->AddGrowableCol(1);

    flexGridSizer31->Add(flexGridSizer50, 0, wxALL, WXC_FROM_DIP(5));

    m_staticText33 = new wxStaticText(
        m_plDir, wxID_ANY, _("Select a folder:"), wxDefaultPosition, wxDLG_UNIT(m_plDir, wxSize(-1, -1)), 0);
    wxFont m_staticText33Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText33->SetFont(m_staticText33Font);

    flexGridSizer50->Add(m_staticText33, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText33->SetMinSize(wxSize(183, -1));

    m_dirSelection = new wxDirPickerCtrl(m_plDir, wxID_ANY, wxEmptyString, _("Select a folder"), wxDefaultPosition,
        wxDLG_UNIT(m_plDir, wxSize(-1, -1)), wxDIRP_SMALL | wxDIRP_DEFAULT_STYLE);

    flexGridSizer50->Add(m_dirSelection, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));

    wxFlexGridSizer* flexGridSizer47 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer47->SetFlexibleDirection(wxBOTH);
    flexGridSizer47->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer31->Add(flexGridSizer47, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText48 = new wxStaticText(m_plDir, wxID_ANY, _("Skip File with 'Ignore' in Name"), wxDefaultPosition,
        wxDLG_UNIT(m_plDir, wxSize(-1, -1)), 0);
    wxFont m_staticText48Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText48->SetFont(m_staticText48Font);

    flexGridSizer47->Add(m_staticText48, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText48->SetMinSize(wxSize(180, -1));

    m_cbSkipIgnore =
        new wxCheckBox(m_plDir, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_plDir, wxSize(-1, -1)), 0);
    m_cbSkipIgnore->SetValue(true);

    flexGridSizer47->Add(m_cbSkipIgnore, 0, wxALL, WXC_FROM_DIP(5));

    m_staticLine43 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer20->Add(m_staticLine43, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizer22 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer22->SetFlexibleDirection(wxBOTH);
    flexGridSizer22->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer20->Add(flexGridSizer22, 1, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_btCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_btCancelFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btCancel->SetFont(m_btCancelFont);
    m_btCancel->SetToolTip(_("Cancel"));

    flexGridSizer22->Add(m_btCancel, 0, wxALL, WXC_FROM_DIP(5));

    m_btRun = new wxButton(this, wxID_ANY, _("Run . . ."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_btRunFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btRun->SetFont(m_btRunFont);
    m_btRun->SetToolTip(_("Run"));

    flexGridSizer22->Add(m_btRun, 0, wxALL, WXC_FROM_DIP(5));

    SetName(wxT("CncTestRunConfigBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if(GetSizer()) {
	GetSizer()->Fit(this);
    }
    if(GetParent()) {
	CentreOnParent(wxBOTH);
    } else {
	CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_btCancel->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncTestRunConfigBase::onCancel, this);
    m_btRun->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncTestRunConfigBase::onRun, this);
}

CncTestRunConfigBase::~CncTestRunConfigBase()
{
    m_btCancel->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncTestRunConfigBase::onCancel, this);
    m_btRun->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncTestRunConfigBase::onRun, this);
}
