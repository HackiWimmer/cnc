//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterReferencePosition.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterReferencePosition.h"

// Declare the bitmap loading function
extern void wxC127EInitBitmapResources();

static bool bBitmapLoaded = false;

CncAnchorPositionBase::CncAnchorPositionBase(wxWindow* parent,
    wxWindowID id,
    const wxString& title,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
	// We need to initialise the default bitmap handler
	wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
	wxC127EInitBitmapResources();
	bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
	wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("Anchor"));
	wxIcon icn;
	icn.CopyFromBitmap(iconBmp);
	app_icons.AddIcon(icn);
    }
    SetIcons(app_icons);

    wxFlexGridSizer* flexGridSizer535 = new wxFlexGridSizer(9, 1, 0, 0);
    flexGridSizer535->SetFlexibleDirection(wxBOTH);
    flexGridSizer535->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer535->AddGrowableCol(0);
    flexGridSizer535->AddGrowableRow(0);
    flexGridSizer535->SetMinSize(500, 300);
    this->SetSizer(flexGridSizer535);

    wxFlexGridSizer* flexGridSizer567 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer567->SetFlexibleDirection(wxBOTH);
    flexGridSizer567->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer567->AddGrowableCol(0);
    flexGridSizer567->AddGrowableRow(0);

    flexGridSizer535->Add(flexGridSizer567, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_anchorListPlaceholder =
        new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_anchorListPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));

    flexGridSizer567->Add(m_anchorListPlaceholder, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizer566 = new wxFlexGridSizer(5, 1, 0, 0);
    flexGridSizer566->SetFlexibleDirection(wxBOTH);
    flexGridSizer566->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer567->Add(flexGridSizer566, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_btAdd = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer566->Add(m_btAdd, 0, wxALL, WXC_FROM_DIP(1));

    m_btMod = new wxButton(this, wxID_ANY, _("Edit"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer566->Add(m_btMod, 0, wxALL, WXC_FROM_DIP(1));

    m_btDel = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer566->Add(m_btDel, 0, wxALL, WXC_FROM_DIP(1));

    m_staticLine585 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer566->Add(m_staticLine585, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_btDel9 = new wxButton(this, wxID_ANY, _("Close"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_btDel9Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btDel9->SetFont(m_btDel9Font);

    flexGridSizer566->Add(m_btDel9, 0, wxALL, WXC_FROM_DIP(1));

    m_staticLine577 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer535->Add(m_staticLine577, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizerN = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizerN->SetFlexibleDirection(wxBOTH);
    flexGridSizerN->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizerN->AddGrowableCol(2);
    flexGridSizerN->AddGrowableRow(0);

    flexGridSizer535->Add(flexGridSizerN, 1, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_staticText555 =
        new wxStaticText(this, wxID_ANY, _("Name:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText555Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText555->SetFont(m_staticText555Font);

    flexGridSizerN->Add(m_staticText555, 0, wxALL, WXC_FROM_DIP(5));

    flexGridSizerN->Add(6, 0, 1, wxALL, WXC_FROM_DIP(0));

    m_valN = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_valN->SetHint(wxT(""));
#endif

    flexGridSizerN->Add(m_valN, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));

    m_staticText579 =
        new wxStaticText(this, wxID_ANY, _("Display"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText579Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText579->SetFont(m_staticText579Font);

    flexGridSizerN->Add(m_staticText579, 0, wxALL, WXC_FROM_DIP(5));

    m_valS = new wxCheckBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_valS->SetValue(false);

    flexGridSizerN->Add(m_valS, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer564 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer564->SetFlexibleDirection(wxBOTH);
    flexGridSizer564->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer564->AddGrowableCol(2);
    flexGridSizer564->AddGrowableRow(0);

    flexGridSizer535->Add(flexGridSizer564, 1, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizer580 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer580->SetFlexibleDirection(wxBOTH);
    flexGridSizer580->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer580->AddGrowableCol(6);
    flexGridSizer580->AddGrowableRow(0);

    flexGridSizer564->Add(flexGridSizer580, 1, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(0));

    m_staticText593 =
        new wxStaticText(this, wxID_ANY, _("Type:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText593Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText593->SetFont(m_staticText593Font);

    flexGridSizer580->Add(m_staticText593, 0, wxALL, WXC_FROM_DIP(5));

    flexGridSizer580->Add(8, 0, 1, wxALL, WXC_FROM_DIP(0));

    wxArrayString m_valTArr;
    m_valTArr.Add(_("Logically"));
    m_valTArr.Add(_("Physically"));
    m_valT = new wxComboBox(
        this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), m_valTArr, wxCB_READONLY);
    m_valT->SetSelection(1);

    flexGridSizer580->Add(m_valT, 0, wxALL, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizerX = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizerX->SetFlexibleDirection(wxBOTH);
    flexGridSizerX->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer580->Add(flexGridSizerX, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText5392 = new wxStaticText(this, wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText5392Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5392->SetFont(m_staticText5392Font);

    flexGridSizerX->Add(m_staticText5392, 0, wxALL, WXC_FROM_DIP(5));

    m_valX =
        new wxTextCtrl(this, wxID_ANY, wxT("300.567"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(60, -1)), wxTE_RIGHT);
#if wxVERSION_NUMBER >= 3000
    m_valX->SetHint(wxT(""));
#endif

    flexGridSizerX->Add(m_valX, 0, wxALL, WXC_FROM_DIP(2));
    m_valX->SetMinSize(wxSize(60, -1));

    wxFlexGridSizer* flexGridSizerY = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizerY->SetFlexibleDirection(wxBOTH);
    flexGridSizerY->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer580->Add(flexGridSizerY, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText5396 = new wxStaticText(this, wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText5396Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5396->SetFont(m_staticText5396Font);

    flexGridSizerY->Add(m_staticText5396, 0, wxALL, WXC_FROM_DIP(5));

    m_valY =
        new wxTextCtrl(this, wxID_ANY, wxT("300.567"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(60, -1)), wxTE_RIGHT);
#if wxVERSION_NUMBER >= 3000
    m_valY->SetHint(wxT(""));
#endif

    flexGridSizerY->Add(m_valY, 0, wxALL, WXC_FROM_DIP(2));
    m_valY->SetMinSize(wxSize(60, -1));

    wxFlexGridSizer* flexGridSizerZ = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizerZ->SetFlexibleDirection(wxBOTH);
    flexGridSizerZ->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer580->Add(flexGridSizerZ, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText539 = new wxStaticText(this, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText539Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText539->SetFont(m_staticText539Font);

    flexGridSizerZ->Add(m_staticText539, 0, wxALL, WXC_FROM_DIP(5));

    m_valZ =
        new wxTextCtrl(this, wxID_ANY, wxT("300.567"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(60, -1)), wxTE_RIGHT);
#if wxVERSION_NUMBER >= 3000
    m_valZ->SetHint(wxT(""));
#endif

    flexGridSizerZ->Add(m_valZ, 0, wxALL, WXC_FROM_DIP(2));
    m_valZ->SetMinSize(wxSize(60, -1));

    m_staticText543 = new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    flexGridSizer580->Add(m_staticText543, 0, wxALL, WXC_FROM_DIP(5));

    SetName(wxT("CncAnchorPositionBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) {
	GetSizer()->Fit(this);
    }
    if(GetParent()) {
	CentreOnParent(wxBOTH);
    } else {
	CentreOnScreen(wxBOTH);
    }
    if(!wxPersistenceManager::Get().Find(this)) {
	wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
	wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    this->Bind(wxEVT_CLOSE_WINDOW, &CncAnchorPositionBase::onCloseWindow, this);
    this->Bind(wxEVT_INIT_DIALOG, &CncAnchorPositionBase::onInitDialog, this);
    this->Bind(wxEVT_SHOW, &CncAnchorPositionBase::onShow, this);
    m_btAdd->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onAdd, this);
    m_btMod->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onMod, this);
    m_btDel->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onDel, this);
    m_btDel9->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onClose, this);
    m_valN->Bind(wxEVT_COMMAND_TEXT_UPDATED, &CncAnchorPositionBase::onUpdateName, this);
}

CncAnchorPositionBase::~CncAnchorPositionBase()
{
    this->Unbind(wxEVT_CLOSE_WINDOW, &CncAnchorPositionBase::onCloseWindow, this);
    this->Unbind(wxEVT_INIT_DIALOG, &CncAnchorPositionBase::onInitDialog, this);
    this->Unbind(wxEVT_SHOW, &CncAnchorPositionBase::onShow, this);
    m_btAdd->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onAdd, this);
    m_btMod->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onMod, this);
    m_btDel->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onDel, this);
    m_btDel9->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncAnchorPositionBase::onClose, this);
    m_valN->Unbind(wxEVT_COMMAND_TEXT_UPDATED, &CncAnchorPositionBase::onUpdateName, this);
}

CncReferencePositionBase::CncReferencePositionBase(wxWindow* parent,
    wxWindowID id,
    const wxString& title,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
	// We need to initialise the default bitmap handler
	wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
	wxC127EInitBitmapResources();
	bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
	wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("snap-orto"));
	wxIcon icn;
	icn.CopyFromBitmap(iconBmp);
	app_icons.AddIcon(icn);
    }
    SetIcons(app_icons);

    wxFlexGridSizer* flexGridSizer454 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer454->SetFlexibleDirection(wxBOTH);
    flexGridSizer454->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer454->AddGrowableCol(0);
    flexGridSizer454->AddGrowableRow(1);
    flexGridSizer454->SetMinSize(800, 600);
    this->SetSizer(flexGridSizer454);

    m_infobar = new wxInfoBar(this, wxID_ANY);
    m_infobar->SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));

    flexGridSizer454->Add(m_infobar, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer7428 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer7428->SetFlexibleDirection(wxBOTH);
    flexGridSizer7428->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer7428->AddGrowableCol(0);
    flexGridSizer7428->AddGrowableRow(0);

    flexGridSizer454->Add(flexGridSizer7428, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_notebooMain = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    wxFont m_notebooMainFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_notebooMain->SetFont(m_notebooMainFont);
    m_notebooMain->SetName(wxT("m_notebooMain"));
    wxImageList* m_notebooMain_il = new wxImageList(32, 32);
    m_notebooMain->AssignImageList(m_notebooMain_il);

    flexGridSizer7428->Add(m_notebooMain, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_panelRef = new wxPanel(
        m_notebooMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebooMain, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    int m_panelRefImgIndex;
    m_panelRefImgIndex = m_notebooMain_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-home@2x")));
    m_notebooMain->AddPage(m_panelRef, _("Reference"), true, m_panelRefImgIndex);

    wxFlexGridSizer* flexGridSizer829 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer829->SetFlexibleDirection(wxBOTH);
    flexGridSizer829->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer829->AddGrowableCol(0);
    flexGridSizer829->AddGrowableRow(0);
    m_panelRef->SetSizer(flexGridSizer829);

    m_evaluateReferencePlaceholder =
        new wxPanel(m_panelRef, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelRef, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_evaluateReferencePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));

    flexGridSizer829->Add(m_evaluateReferencePlaceholder, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_panelNav = new wxPanel(
        m_notebooMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebooMain, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_panelNav->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    int m_panelNavImgIndex;
    m_panelNavImgIndex = m_notebooMain_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-navi@2x")));
    m_notebooMain->AddPage(m_panelNav, _("Navigation"), false, m_panelNavImgIndex);

    wxFlexGridSizer* flexGridSizer515 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer515->SetFlexibleDirection(wxBOTH);
    flexGridSizer515->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer515->AddGrowableCol(1);
    flexGridSizer515->AddGrowableRow(0);
    m_panelNav->SetSizer(flexGridSizer515);

    wxFlexGridSizer* flexGridSizer6839 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer6839->SetFlexibleDirection(wxBOTH);
    flexGridSizer6839->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer515->Add(flexGridSizer6839, 0, wxALL, WXC_FROM_DIP(0));

    m_staticText5505 = new wxStaticText(
        m_panelNav, wxID_ANY, _(" Navigation Panel:"), wxDefaultPosition, wxDLG_UNIT(m_panelNav, wxSize(-1, -1)), 0);
    wxFont m_staticText5505Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5505->SetFont(m_staticText5505Font);

    flexGridSizer6839->Add(m_staticText5505, 0, wxALL, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer5314 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5314->SetFlexibleDirection(wxBOTH);
    flexGridSizer5314->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer5314->AddGrowableCol(1);
    flexGridSizer5314->AddGrowableRow(0);

    flexGridSizer6839->Add(flexGridSizer5314, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer5336 = new wxFlexGridSizer(5, 1, 0, 0);
    flexGridSizer5336->SetFlexibleDirection(wxBOTH);
    flexGridSizer5336->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer5314->Add(flexGridSizer5336, 0, wxALL, WXC_FROM_DIP(5));

    m_staticLine5357 = new wxStaticLine(
        m_panelNav, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelNav, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer5336->Add(m_staticLine5357, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText53555 = new wxStaticText(
        m_panelNav, wxID_ANY, _("Step Sensitivity:"), wxDefaultPosition, wxDLG_UNIT(m_panelNav, wxSize(-1, -1)), 0);
    m_staticText53555->SetForegroundColour(wxColour(wxT("rgb(0,0,128)")));
    wxFont m_staticText53555Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText53555->SetFont(m_staticText53555Font);

    flexGridSizer5336->Add(m_staticText53555, 0, wxALL, WXC_FROM_DIP(5));

    wxArrayString m_rbStepSensitivityArr;
    m_rbStepSensitivityArr.Add(_("Finest:"));
    m_rbStepSensitivityArr.Add(_("Fine:"));
    m_rbStepSensitivityArr.Add(_("Medium:"));
    m_rbStepSensitivityArr.Add(_("Rough:"));
    m_rbStepSensitivityArr.Add(_("Roughest:"));
    m_rbStepSensitivity = new wxRadioBox(m_panelNav, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_panelNav, wxSize(-1, -1)), m_rbStepSensitivityArr, 1, wxRA_SPECIFY_COLS);
    m_rbStepSensitivity->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_rbStepSensitivityFont(
        8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_rbStepSensitivity->SetFont(m_rbStepSensitivityFont);
    m_rbStepSensitivity->SetSelection(1);

    flexGridSizer5336->Add(m_rbStepSensitivity, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_staticText5355 = new wxStaticText(
        m_panelNav, wxID_ANY, _("Step Mode:"), wxDefaultPosition, wxDLG_UNIT(m_panelNav, wxSize(-1, -1)), 0);
    m_staticText5355->SetForegroundColour(wxColour(wxT("rgb(0,0,128)")));
    wxFont m_staticText5355Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5355->SetFont(m_staticText5355Font);

    flexGridSizer5336->Add(m_staticText5355, 0, wxALL, WXC_FROM_DIP(5));

    wxArrayString m_rbStepModeArr;
    m_rbStepModeArr.Add(_("Interactive:"));
    m_rbStepModeArr.Add(_("Stepwise:"));
    m_rbStepMode = new wxRadioBox(m_panelNav, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_panelNav, wxSize(-1, -1)), m_rbStepModeArr, 1, wxRA_SPECIFY_COLS);
    wxFont m_rbStepModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_rbStepMode->SetFont(m_rbStepModeFont);
    m_rbStepMode->SetSelection(0);

    flexGridSizer5336->Add(m_rbStepMode, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_navigationPanelPlaceholder =
        new wxPanel(m_panelNav, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelNav, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_navigationPanelPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));

    flexGridSizer515->Add(m_navigationPanelPlaceholder, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_staticLine518 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer454->Add(m_staticLine518, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer7419 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer7419->SetFlexibleDirection(wxBOTH);
    flexGridSizer7419->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer7419->AddGrowableCol(1);
    flexGridSizer7419->AddGrowableRow(0);

    flexGridSizer454->Add(flexGridSizer7419, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer7452 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer7452->SetFlexibleDirection(wxBOTH);
    flexGridSizer7452->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer7419->Add(flexGridSizer7452, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(1));

    flexGridSizer7452->Add(5, 0, 1, wxALL, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer5342 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5342->SetFlexibleDirection(wxBOTH);
    flexGridSizer5342->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer5342->AddGrowableCol(2);
    flexGridSizer5342->AddGrowableRow(0);

    flexGridSizer7419->Add(flexGridSizer5342, 1, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(0));

    m_btSet = new wxButton(this, wxID_ANY, _("Set (0, 0, 0)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btSet->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("playstation-square-dark-icon16")), wxLEFT);
    m_btSet->SetBitmapMargins(2, 2);
#endif
    wxFont m_btSetFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btSet->SetFont(m_btSetFont);
    m_btSet->SetToolTip(_("Set Reference Position\nand Reference Mode"));

    flexGridSizer5342->Add(m_btSet, 0, wxALL | wxALIGN_BOTTOM, WXC_FROM_DIP(7));

    m_btCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btCancel->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("playstation-triangle-dark-icon16")), wxLEFT);
    m_btCancel->SetBitmapMargins(2, 2);
#endif
    m_btCancel->SetToolTip(_("Abort"));

    flexGridSizer5342->Add(m_btCancel, 0, wxALL | wxALIGN_BOTTOM, WXC_FROM_DIP(7));

    m_infoTimer = new wxTimer;

    SetName(wxT("CncReferencePositionBase"));
    SetMinClientSize(wxSize(800, 600));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) {
	GetSizer()->Fit(this);
    }
    if(GetParent()) {
	CentreOnParent(wxBOTH);
    } else {
	CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Bind(wxEVT_INIT_DIALOG, &CncReferencePositionBase::init, this);
    this->Bind(wxEVT_SHOW, &CncReferencePositionBase::show, this);
    m_rbStepSensitivity->Bind(wxEVT_COMMAND_RADIOBOX_SELECTED, &CncReferencePositionBase::selectStepSensitivity, this);
    m_rbStepSensitivity->Bind(wxEVT_SET_FOCUS, &CncReferencePositionBase::onSetCtrlFocus, this);
    m_rbStepSensitivity->Bind(wxEVT_KILL_FOCUS, &CncReferencePositionBase::onKillCtrlFocus, this);
    m_rbStepMode->Bind(wxEVT_COMMAND_RADIOBOX_SELECTED, &CncReferencePositionBase::selectStepMode, this);
    m_rbStepMode->Bind(wxEVT_SET_FOCUS, &CncReferencePositionBase::onSetCtrlFocus, this);
    m_rbStepMode->Bind(wxEVT_KILL_FOCUS, &CncReferencePositionBase::onKillCtrlFocus, this);
    m_btSet->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferencePositionBase::set, this);
    m_btCancel->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferencePositionBase::cancel, this);
    m_infoTimer->Bind(wxEVT_TIMER, &CncReferencePositionBase::onInfoTimer, this);
}

CncReferencePositionBase::~CncReferencePositionBase()
{
    this->Unbind(wxEVT_INIT_DIALOG, &CncReferencePositionBase::init, this);
    this->Unbind(wxEVT_SHOW, &CncReferencePositionBase::show, this);
    m_rbStepSensitivity->Unbind(
        wxEVT_COMMAND_RADIOBOX_SELECTED, &CncReferencePositionBase::selectStepSensitivity, this);
    m_rbStepSensitivity->Unbind(wxEVT_SET_FOCUS, &CncReferencePositionBase::onSetCtrlFocus, this);
    m_rbStepSensitivity->Unbind(wxEVT_KILL_FOCUS, &CncReferencePositionBase::onKillCtrlFocus, this);
    m_rbStepMode->Unbind(wxEVT_COMMAND_RADIOBOX_SELECTED, &CncReferencePositionBase::selectStepMode, this);
    m_rbStepMode->Unbind(wxEVT_SET_FOCUS, &CncReferencePositionBase::onSetCtrlFocus, this);
    m_rbStepMode->Unbind(wxEVT_KILL_FOCUS, &CncReferencePositionBase::onKillCtrlFocus, this);
    m_btSet->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferencePositionBase::set, this);
    m_btCancel->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferencePositionBase::cancel, this);
    m_infoTimer->Unbind(wxEVT_TIMER, &CncReferencePositionBase::onInfoTimer, this);

    m_infoTimer->Stop();
    wxDELETE(m_infoTimer);
}

CncReferenceEvaluationBase::CncReferenceEvaluationBase(wxWindow* parent,
    wxWindowID id,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxPanel(parent, id, pos, size, style)
{
    if(!bBitmapLoaded) {
	// We need to initialise the default bitmap handler
	wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
	wxC127EInitBitmapResources();
	bBitmapLoaded = true;
    }
    this->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    wxFlexGridSizer* flexGridSizer5324 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer5324->SetFlexibleDirection(wxBOTH);
    flexGridSizer5324->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer5324->AddGrowableCol(0);
    flexGridSizer5324->AddGrowableRow(0);
    this->SetSizer(flexGridSizer5324);

    wxFlexGridSizer* flexGridSizer234 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer234->SetFlexibleDirection(wxBOTH);
    flexGridSizer234->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer234->AddGrowableCol(0);
    flexGridSizer234->AddGrowableRow(1);

    flexGridSizer5324->Add(flexGridSizer234, 0, wxALL | wxEXPAND | wxALIGN_TOP, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer58457 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer58457->SetFlexibleDirection(wxBOTH);
    flexGridSizer58457->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer58457->AddGrowableCol(0);
    flexGridSizer58457->AddGrowableRow(0);

    flexGridSizer234->Add(flexGridSizer58457, 0, wxALL, WXC_FROM_DIP(0));

    m_staticText534011 = new wxStaticText(
        this, wxID_ANY, _("Evaluation Method:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText534011Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText534011->SetFont(m_staticText534011Font);

    flexGridSizer58457->Add(m_staticText534011, 0, wxALL, WXC_FROM_DIP(5));

    m_notebookEvalMode =
        new wxListbook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLB_LEFT | wxBK_DEFAULT);
    m_notebookEvalMode->SetName(wxT("m_notebookEvalMode"));
    wxImageList* m_notebookEvalMode_il = new wxImageList(48, 48);
    m_notebookEvalMode->AssignImageList(m_notebookEvalMode_il);

    flexGridSizer234->Add(m_notebookEvalMode, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_panelTouchblock = new wxPanel(m_notebookEvalMode, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_notebookEvalMode, wxSize(-1, -1)), wxTAB_TRAVERSAL | wxBORDER_STATIC);
    int m_panelTouchblockImgIndex;
    m_panelTouchblockImgIndex = m_notebookEvalMode_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("touchblock")));
    m_notebookEvalMode->AddPage(m_panelTouchblock, _("Touchblock"), true, m_panelTouchblockImgIndex);

    wxFlexGridSizer* flexGridSizer193 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer193->SetFlexibleDirection(wxBOTH);
    flexGridSizer193->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer193->AddGrowableCol(0);
    m_panelTouchblock->SetSizer(flexGridSizer193);

    wxFlexGridSizer* flexGridSizer471 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer471->SetFlexibleDirection(wxBOTH);
    flexGridSizer471->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer471->AddGrowableCol(1);
    flexGridSizer471->AddGrowableRow(0);

    flexGridSizer193->Add(flexGridSizer471, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer468 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer468->SetFlexibleDirection(wxBOTH);
    flexGridSizer468->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer471->Add(flexGridSizer468, 0, wxALL, WXC_FROM_DIP(2));

    m_staticText470 = new wxStaticText(m_panelTouchblock, wxID_ANY, _("Touch Corner:"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), 0);
    wxFont m_staticText470Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText470->SetFont(m_staticText470Font);

    flexGridSizer468->Add(m_staticText470, 0, wxALL, WXC_FROM_DIP(5));

    m_btTouchCorner =
        new wxBitmapButton(m_panelTouchblock, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-step_in@2x")),
            wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), wxBU_AUTODRAW);

    flexGridSizer468->Add(m_btTouchCorner, 0, wxALL, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer472 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer472->SetFlexibleDirection(wxBOTH);
    flexGridSizer472->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer471->Add(flexGridSizer472, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer1674 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer1674->SetFlexibleDirection(wxBOTH);
    flexGridSizer1674->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer472->Add(flexGridSizer1674, 0, wxALL, WXC_FROM_DIP(0));

    m_staticText1695 = new wxStaticText(m_panelTouchblock, wxID_ANY, _("Touch tool diameter:"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(190, -1)), 0);

    flexGridSizer1674->Add(m_staticText1695, 0, wxALL, WXC_FROM_DIP(3));
    m_staticText1695->SetMinSize(wxSize(190, -1));

    m_staticText1717 = new wxStaticText(
        m_panelTouchblock, wxID_ANY, _("[mm]"), wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), 0);
    wxFont m_staticText1717Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1717->SetFont(m_staticText1717Font);

    flexGridSizer1674->Add(m_staticText1717, 0, wxALL, WXC_FROM_DIP(5));

    m_touchDiameter = new wxTextCtrl(m_panelTouchblock, wxID_ANY, wxT("6.13"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), wxTE_RIGHT);
#if wxVERSION_NUMBER >= 3000
    m_touchDiameter->SetHint(wxT(""));
#endif

    flexGridSizer1674->Add(m_touchDiameter, 0, wxALL, WXC_FROM_DIP(2));

    wxFlexGridSizer* flexGridSizer287 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer287->SetFlexibleDirection(wxBOTH);
    flexGridSizer287->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer287->AddGrowableCol(1);
    flexGridSizer287->AddGrowableRow(0);

    flexGridSizer472->Add(flexGridSizer287, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText289 = new wxStaticText(m_panelTouchblock, wxID_ANY, _("Perform a Contact Test before Start:"),
        wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(190, -1)), 0);

    flexGridSizer287->Add(m_staticText289, 0, wxALL, WXC_FROM_DIP(3));
    m_staticText289->SetMinSize(wxSize(190, -1));

    m_tbPrevTest = new wxToggleButton(
        m_panelTouchblock, wxID_ANY, _("Yes"), wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(110, 50)), 0);
    wxFont m_tbPrevTestFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_tbPrevTest->SetFont(m_tbPrevTestFont);
    m_tbPrevTest->SetValue(true);

    flexGridSizer287->Add(m_tbPrevTest, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(1));
    m_tbPrevTest->SetMinSize(wxSize(110, 50));

    wxFlexGridSizer* flexGridSizer152 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer152->SetFlexibleDirection(wxBOTH);
    flexGridSizer152->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer152->AddGrowableCol(0);

    flexGridSizer193->Add(flexGridSizer152, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticLine3106 = new wxStaticLine(
        m_panelTouchblock, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer152->Add(m_staticLine3106, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer299 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer299->SetFlexibleDirection(wxBOTH);
    flexGridSizer299->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer299->AddGrowableCol(0);
    flexGridSizer299->AddGrowableRow(0);

    flexGridSizer152->Add(flexGridSizer299, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));

    m_staticText304 = new wxStaticText(m_panelTouchblock, wxID_ANY,
        _("Perform a Contact Test only:\n(Connect the Touchtool and Touchblock manually)"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), 0);
    wxFont m_staticText304Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText304->SetFont(m_staticText304Font);

    flexGridSizer299->Add(m_staticText304, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    m_btTouchTest = new wxButton(m_panelTouchblock, wxID_ANY, _("Contact Test"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(110, 50)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btTouchTest->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxLEFT);
    m_btTouchTest->SetBitmapMargins(2, 2);
#endif
    wxFont m_btTouchTestFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btTouchTest->SetFont(m_btTouchTestFont);

    flexGridSizer299->Add(m_btTouchTest, 0, wxALL, WXC_FROM_DIP(2));
    m_btTouchTest->SetMinSize(wxSize(110, 50));

    m_staticLine310 = new wxStaticLine(
        m_panelTouchblock, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer152->Add(m_staticLine310, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer29812 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer29812->SetFlexibleDirection(wxBOTH);
    flexGridSizer29812->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer29812->AddGrowableCol(0);
    flexGridSizer29812->AddGrowableRow(0);

    flexGridSizer152->Add(flexGridSizer29812, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));

    m_staticText306 = new wxStaticText(m_panelTouchblock, wxID_ANY,
        _("Perform a Z Touch, the tool will move downwards until the touch block\nis reached:"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), 0);
    wxFont m_staticText306Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText306->SetFont(m_staticText306Font);

    flexGridSizer29812->Add(m_staticText306, 0, wxALL, WXC_FROM_DIP(5));

    m_btTouchZ = new wxButton(m_panelTouchblock, wxID_ANY, _("Z Touch"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(110, 50)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btTouchZ->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save.1")), wxLEFT);
    m_btTouchZ->SetBitmapMargins(2, 2);
#endif
    wxFont m_btTouchZFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btTouchZ->SetFont(m_btTouchZFont);

    flexGridSizer29812->Add(m_btTouchZ, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_btTouchZ->SetMinSize(wxSize(110, 50));

    m_staticLine312 = new wxStaticLine(
        m_panelTouchblock, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer152->Add(m_staticLine312, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer298 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer298->SetFlexibleDirection(wxBOTH);
    flexGridSizer298->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer298->AddGrowableCol(0);
    flexGridSizer298->AddGrowableRow(0);

    flexGridSizer152->Add(flexGridSizer298, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));

    m_staticText308 = new wxStaticText(m_panelTouchblock, wxID_ANY,
        _("Perform a XYZ Touch, the tool will move downwards until the touch block\nis reached and afterward touch the "
          "X and Y cheek of the touch block:"),
        wxDefaultPosition, wxDLG_UNIT(m_panelTouchblock, wxSize(-1, -1)), 0);
    wxFont m_staticText308Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText308->SetFont(m_staticText308Font);

    flexGridSizer298->Add(m_staticText308, 0, wxALL, WXC_FROM_DIP(5));

    m_btTouchXYZ = new wxButton(m_panelTouchblock, wxID_ANY, _("XYZ Touch"), wxDefaultPosition,
        wxDLG_UNIT(m_panelTouchblock, wxSize(110, 50)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btTouchXYZ->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("aui-minimize")), wxLEFT);
    m_btTouchXYZ->SetBitmapMargins(2, 2);
#endif
    wxFont m_btTouchXYZFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btTouchXYZ->SetFont(m_btTouchXYZFont);

    flexGridSizer298->Add(m_btTouchXYZ, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_btTouchXYZ->SetMinSize(wxSize(110, 50));

    m_panelCamera = new wxPanel(m_notebookEvalMode, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_notebookEvalMode, wxSize(-1, -1)), wxTAB_TRAVERSAL | wxBORDER_STATIC);
    int m_panelCameraImgIndex;
    m_panelCameraImgIndex = m_notebookEvalMode_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("camera")));
    m_notebookEvalMode->AddPage(m_panelCamera, _("Camera"), false, m_panelCameraImgIndex);

    wxFlexGridSizer* flexGridSizer341 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer341->SetFlexibleDirection(wxBOTH);
    flexGridSizer341->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer341->AddGrowableCol(0);
    flexGridSizer341->AddGrowableRow(0);
    m_panelCamera->SetSizer(flexGridSizer341);

    m_panelCameraArea = new wxPanel(
        m_panelCamera, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelCamera, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_panelCameraArea->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));

    flexGridSizer341->Add(m_panelCameraArea, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer847 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer847->SetFlexibleDirection(wxBOTH);
    flexGridSizer847->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer847->AddGrowableCol(0);
    flexGridSizer847->AddGrowableRow(1);
    m_panelCameraArea->SetSizer(flexGridSizer847);

    m_staticText849 = new wxStaticText(m_panelCameraArea, wxID_ANY, _("Camera Preview:"), wxDefaultPosition,
        wxDLG_UNIT(m_panelCameraArea, wxSize(-1, -1)), 0);
    wxFont m_staticText849Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText849->SetFont(m_staticText849Font);

    flexGridSizer847->Add(m_staticText849, 0, wxALL, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer846 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer846->SetFlexibleDirection(wxBOTH);
    flexGridSizer846->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer846->AddGrowableCol(0);
    flexGridSizer846->AddGrowableRow(0);

    flexGridSizer847->Add(flexGridSizer846, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_cameraCapturePlaceholder = new wxPanel(m_panelCameraArea, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_panelCameraArea, wxSize(-1, -1)), wxTAB_TRAVERSAL | wxBORDER_STATIC);

    flexGridSizer846->Add(m_cameraCapturePlaceholder, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_staticLine513 = new wxStaticLine(
        m_panelCameraArea, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelCameraArea, wxSize(-1, -1)), wxLI_VERTICAL);

    flexGridSizer846->Add(m_staticLine513, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizer509 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer509->SetFlexibleDirection(wxBOTH);
    flexGridSizer509->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer846->Add(flexGridSizer509, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_btDetachCamera =
        new wxBitmapButton(m_panelCameraArea, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("abb-export")),
            wxDefaultPosition, wxDLG_UNIT(m_panelCameraArea, wxSize(26, 26)), wxBU_AUTODRAW);
    m_btDetachCamera->Hide();

    flexGridSizer509->Add(m_btDetachCamera, 0, wxALL, WXC_FROM_DIP(1));
    m_btDetachCamera->SetMinSize(wxSize(26, 26));

    m_btShowCrossHV =
        new wxBitmapToggleButton(m_panelCameraArea, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("snap-orto")),
            wxDefaultPosition, wxDLG_UNIT(m_panelCameraArea, wxSize(26, 26)), 0);
    m_btShowCrossHV->SetToolTip(_("Show cross"));
    m_btShowCrossHV->SetValue(true);

    flexGridSizer509->Add(m_btShowCrossHV, 0, wxALL, WXC_FROM_DIP(1));
    m_btShowCrossHV->SetMinSize(wxSize(26, 26));

    m_btShowCrossDD = new wxBitmapToggleButton(m_panelCameraArea, wxID_ANY,
        wxXmlResource::Get()->LoadBitmap(wxT("snap-intersection")), wxDefaultPosition,
        wxDLG_UNIT(m_panelCameraArea, wxSize(26, 26)), 0);
    m_btShowCrossDD->SetToolTip(_("Show cross"));
    m_btShowCrossDD->SetValue(false);

    flexGridSizer509->Add(m_btShowCrossDD, 0, wxALL, WXC_FROM_DIP(1));
    m_btShowCrossDD->SetMinSize(wxSize(26, 26));

    m_btShowRect = new wxBitmapToggleButton(m_panelCameraArea, wxID_ANY,
        wxXmlResource::Get()->LoadBitmap(wxT("table-border-outline")), wxDefaultPosition,
        wxDLG_UNIT(m_panelCameraArea, wxSize(26, 26)), 0);
    m_btShowRect->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW));
    m_btShowRect->SetToolTip(_("Show Rect"));
    m_btShowRect->SetValue(true);

    flexGridSizer509->Add(m_btShowRect, 0, wxALL, WXC_FROM_DIP(1));
    m_btShowRect->SetMinSize(wxSize(26, 26));

    m_panelByEye = new wxPanel(m_notebookEvalMode, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_notebookEvalMode, wxSize(-1, -1)), wxTAB_TRAVERSAL | wxBORDER_STATIC);
    int m_panelByEyeImgIndex;
    m_panelByEyeImgIndex = m_notebookEvalMode_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("byeye")));
    m_notebookEvalMode->AddPage(m_panelByEye, _("By Eye"), false, m_panelByEyeImgIndex);

    wxFlexGridSizer* flexGridSizer180 = new wxFlexGridSizer(5, 1, 0, 0);
    flexGridSizer180->SetFlexibleDirection(wxBOTH);
    flexGridSizer180->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer180->AddGrowableCol(0);
    m_panelByEye->SetSizer(flexGridSizer180);

    wxFlexGridSizer* flexGridSizer7412 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer7412->SetFlexibleDirection(wxBOTH);
    flexGridSizer7412->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer180->Add(flexGridSizer7412, 1, wxALL, WXC_FROM_DIP(0));

    m_staticText5340 = new wxStaticText(m_panelByEye, wxID_ANY, _("Reference Position Mode:"), wxDefaultPosition,
        wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    wxFont m_staticText5340Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5340->SetFont(m_staticText5340Font);

    flexGridSizer7412->Add(m_staticText5340, 0, wxALL, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer230 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer230->SetFlexibleDirection(wxBOTH);
    flexGridSizer230->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer230->AddGrowableCol(0);
    flexGridSizer230->AddGrowableRow(0);

    flexGridSizer180->Add(flexGridSizer230, 1, wxALL | wxEXPAND | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer5326 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer5326->SetFlexibleDirection(wxBOTH);
    flexGridSizer5326->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer230->Add(flexGridSizer5326, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer5456 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5456->SetFlexibleDirection(wxBOTH);
    flexGridSizer5456->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer5326->Add(flexGridSizer5456, 0, wxALL, WXC_FROM_DIP(0));

    m_staticText5460 = new wxStaticText(
        m_panelByEye, wxID_ANY, _("1"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), wxALIGN_CENTRE);
    wxFont m_staticText5460Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5460->SetFont(m_staticText5460Font);

    flexGridSizer5456->Add(m_staticText5460, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_btMode1 = new wxBitmapToggleButton(m_panelByEye, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode1")),
        wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(64, 64)), 0);
    m_btMode1->SetToolTip(_("Mode 1"));
    m_btMode1->SetValue(false);

    flexGridSizer5456->Add(m_btMode1, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode1->SetMinSize(wxSize(64, 64));

    wxFlexGridSizer* flexGridSizer5461 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5461->SetFlexibleDirection(wxBOTH);
    flexGridSizer5461->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer5326->Add(flexGridSizer5461, 0, wxALL, WXC_FROM_DIP(0));

    m_staticText5467 = new wxStaticText(
        m_panelByEye, wxID_ANY, _("2"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    wxFont m_staticText5467Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5467->SetFont(m_staticText5467Font);

    flexGridSizer5461->Add(m_staticText5467, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_btMode2 = new wxBitmapToggleButton(m_panelByEye, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode2")),
        wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(64, 64)), wxBU_BOTTOM);
    m_btMode2->SetToolTip(_("Mode 2"));
    m_btMode2->SetValue(false);

    flexGridSizer5461->Add(m_btMode2, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode2->SetMinSize(wxSize(64, 64));

    wxFlexGridSizer* flexGridSizer5462 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5462->SetFlexibleDirection(wxBOTH);
    flexGridSizer5462->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer5326->Add(flexGridSizer5462, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_staticText5469 = new wxStaticText(
        m_panelByEye, wxID_ANY, _("3"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    wxFont m_staticText5469Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5469->SetFont(m_staticText5469Font);

    flexGridSizer5462->Add(m_staticText5469, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_btMode3 = new wxBitmapToggleButton(m_panelByEye, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode3")),
        wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(64, 64)), 0);
    m_btMode3->SetToolTip(_("Mode 3"));
    m_btMode3->SetValue(false);

    flexGridSizer5462->Add(m_btMode3, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(5));
    m_btMode3->SetMinSize(wxSize(64, 64));

    wxFlexGridSizer* flexGridSizer5463 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5463->SetFlexibleDirection(wxBOTH);
    flexGridSizer5463->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer5326->Add(flexGridSizer5463, 0, wxALL, WXC_FROM_DIP(0));

    m_staticText5471 = new wxStaticText(
        m_panelByEye, wxID_ANY, _("4"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    wxFont m_staticText5471Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5471->SetFont(m_staticText5471Font);

    flexGridSizer5463->Add(m_staticText5471, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_btMode4 = new wxBitmapToggleButton(m_panelByEye, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode4")),
        wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(64, 64)), 0);
    m_btMode4->SetToolTip(_("Mode 4"));
    m_btMode4->SetValue(false);

    flexGridSizer5463->Add(m_btMode4, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode4->SetMinSize(wxSize(64, 64));

    wxFlexGridSizer* flexGridSizer5464 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5464->SetFlexibleDirection(wxBOTH);
    flexGridSizer5464->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer5326->Add(flexGridSizer5464, 0, wxALL, WXC_FROM_DIP(0));

    m_staticText5473 = new wxStaticText(
        m_panelByEye, wxID_ANY, _("5"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    wxFont m_staticText5473Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5473->SetFont(m_staticText5473Font);

    flexGridSizer5464->Add(m_staticText5473, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_btMode5 = new wxBitmapToggleButton(m_panelByEye, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode5")),
        wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(64, 64)), 0);
    m_btMode5->SetToolTip(_("Mode 5"));
    m_btMode5->SetValue(false);

    flexGridSizer5464->Add(m_btMode5, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode5->SetMinSize(wxSize(64, 64));

    wxFlexGridSizer* flexGridSizer5476 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5476->SetFlexibleDirection(wxBOTH);
    flexGridSizer5476->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer5326->Add(flexGridSizer5476, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_staticText5475 = new wxStaticText(
        m_panelByEye, wxID_ANY, _("6"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    wxFont m_staticText5475Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5475->SetFont(m_staticText5475Font);

    flexGridSizer5476->Add(m_staticText5475, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_btMode6 = new wxBitmapToggleButton(m_panelByEye, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode6")),
        wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(64, 64)), 0);
    m_btMode6->SetToolTip(_("Mode 6"));
    m_btMode6->SetValue(false);

    flexGridSizer5476->Add(m_btMode6, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode6->SetMinSize(wxSize(64, 64));

    m_staticLine4525 = new wxStaticLine(
        m_panelByEye, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer180->Add(m_staticLine4525, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer5447 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5447->SetFlexibleDirection(wxBOTH);
    flexGridSizer5447->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer5447->AddGrowableCol(1);
    flexGridSizer5447->AddGrowableRow(0);

    flexGridSizer180->Add(flexGridSizer5447, 0, wxALL, WXC_FROM_DIP(0));

    flexGridSizer5447->Add(1, 0, 1, wxALL, WXC_FROM_DIP(0));

    m_modeSelected = new wxStaticText(
        m_panelByEye, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    m_modeSelected->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_modeSelected->SetForegroundColour(wxColour(wxT("rgb(0,0,128)")));
    wxFont m_modeSelectedFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_modeSelected->SetFont(m_modeSelectedFont);

    flexGridSizer5447->Add(m_modeSelected, 0, wxALL, WXC_FROM_DIP(6));

    m_modeText = new wxStaticText(
        m_panelByEye, wxID_ANY, _("1\n2\n3"), wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), 0);
    wxFont m_modeTextFont(10, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_modeText->SetFont(m_modeTextFont);

    flexGridSizer5447->Add(m_modeText, 0, wxALL, WXC_FROM_DIP(4));

    m_staticLine452 = new wxStaticLine(
        m_panelByEye, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelByEye, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer180->Add(m_staticLine452, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer5484 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer5484->SetFlexibleDirection(wxBOTH);
    flexGridSizer5484->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer5484->AddGrowableCol(3);
    flexGridSizer5484->AddGrowableRow(0);

    flexGridSizer5324->Add(flexGridSizer5484, 1, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_staticText5486 = new wxStaticText(
        this, wxID_ANY, _("Workpiece\nThickness"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(60, -1)), 0);
    wxFont m_staticText5486Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5486->SetFont(m_staticText5486Font);

    flexGridSizer5484->Add(m_staticText5486, 0, wxALL, WXC_FROM_DIP(3));
    m_staticText5486->SetMinSize(wxSize(60, -1));

    m_workpiceThickness =
        new wxTextCtrl(this, wxID_ANY, wxT("800.00"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(50, -1)), wxTE_RIGHT);
#if wxVERSION_NUMBER >= 3000
    m_workpiceThickness->SetHint(wxT(""));
#endif

    flexGridSizer5484->Add(m_workpiceThickness, 0, wxALL, WXC_FROM_DIP(5));
    m_workpiceThickness->SetMinSize(wxSize(50, -1));

    m_staticText5497 =
        new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText5497Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5497->SetFont(m_staticText5497Font);

    flexGridSizer5484->Add(m_staticText5497, 0, wxALL, WXC_FROM_DIP(7));

    wxFlexGridSizer* flexGridSizer249 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer249->SetFlexibleDirection(wxBOTH);
    flexGridSizer249->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer249->AddGrowableCol(0);
    flexGridSizer249->AddGrowableRow(0);

    flexGridSizer5484->Add(flexGridSizer249, 0, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(0));

    m_staticText5488 = new wxStaticText(
        this, wxID_ANY, _("Measurement\nOffset (X, Y, Z)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText5488Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5488->SetFont(m_staticText5488Font);

    flexGridSizer249->Add(m_staticText5488, 0, wxALL, WXC_FROM_DIP(3));

    m_measuremetOffsetX = new wxTextCtrl(
        this, wxID_ANY, wxT("800,21"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(50, -1)), wxTE_RIGHT | wxTE_READONLY);
    m_measuremetOffsetX->SetToolTip(_("Mesurement Offset X"));
#if wxVERSION_NUMBER >= 3000
    m_measuremetOffsetX->SetHint(wxT(""));
#endif

    flexGridSizer249->Add(m_measuremetOffsetX, 0, wxALL, WXC_FROM_DIP(5));
    m_measuremetOffsetX->SetMinSize(wxSize(50, -1));

    m_measuremetOffsetY = new wxTextCtrl(
        this, wxID_ANY, wxT("700,21"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(50, -1)), wxTE_RIGHT | wxTE_READONLY);
    m_measuremetOffsetY->SetToolTip(_("Mesurement Offset Y"));
#if wxVERSION_NUMBER >= 3000
    m_measuremetOffsetY->SetHint(wxT(""));
#endif

    flexGridSizer249->Add(m_measuremetOffsetY, 0, wxALL, WXC_FROM_DIP(5));
    m_measuremetOffsetY->SetMinSize(wxSize(50, -1));

    m_measuremetOffsetZ = new wxTextCtrl(
        this, wxID_ANY, wxT("600,21"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(50, -1)), wxTE_RIGHT | wxTE_READONLY);
    m_measuremetOffsetZ->SetToolTip(_("Mesurement Offset Z"));
#if wxVERSION_NUMBER >= 3000
    m_measuremetOffsetZ->SetHint(wxT(""));
#endif

    flexGridSizer249->Add(m_measuremetOffsetZ, 0, wxALL, WXC_FROM_DIP(5));
    m_measuremetOffsetZ->SetMinSize(wxSize(50, -1));

    m_staticText5499 =
        new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText5499Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5499->SetFont(m_staticText5499Font);

    flexGridSizer249->Add(m_staticText5499, 0, wxALL, WXC_FROM_DIP(5));

    m_staticLine825 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_HORIZONTAL);

    flexGridSizer5324->Add(m_staticLine825, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer7419 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer7419->SetFlexibleDirection(wxBOTH);
    flexGridSizer7419->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer7419->AddGrowableCol(1);
    flexGridSizer7419->AddGrowableRow(0);

    flexGridSizer5324->Add(flexGridSizer7419, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer7452 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer7452->SetFlexibleDirection(wxBOTH);
    flexGridSizer7452->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer7419->Add(flexGridSizer7452, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(1));

    flexGridSizer7452->Add(5, 0, 1, wxALL, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer519 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer519->SetFlexibleDirection(wxBOTH);
    flexGridSizer519->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer519->AddGrowableCol(1);
    flexGridSizer519->AddGrowableRow(0);

    flexGridSizer7419->Add(flexGridSizer519, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_panel521 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    flexGridSizer519->Add(m_panel521, 0, wxALL, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer124 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer124->SetFlexibleDirection(wxBOTH);
    flexGridSizer124->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer519->Add(flexGridSizer124, 1, wxALL | wxEXPAND | wxALIGN_TOP, WXC_FROM_DIP(0));

    m_staticText132 = new wxStaticText(
        this, wxID_ANY, _("Preview new current Position:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText132Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText132->SetFont(m_staticText132Font);

    flexGridSizer124->Add(m_staticText132, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizer133 = new wxFlexGridSizer(0, 9, 0, 0);
    flexGridSizer133->SetFlexibleDirection(wxBOTH);
    flexGridSizer133->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer133->AddGrowableCol(0);
    flexGridSizer133->AddGrowableCol(1);
    flexGridSizer133->AddGrowableCol(2);
    flexGridSizer133->AddGrowableRow(0);

    flexGridSizer124->Add(flexGridSizer133, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText137 = new wxStaticText(this, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText137Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText137->SetFont(m_staticText137Font);

    flexGridSizer133->Add(m_staticText137, 0, wxALL, WXC_FROM_DIP(5));

    m_previewX = new wxTextCtrl(this, wxID_ANY, wxT("1000.000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(70, -1)),
        wxTE_RIGHT | wxTE_READONLY);
    m_previewX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_previewX->SetForegroundColour(wxColour(wxT("rgb(128,64,64)")));
    wxFont m_previewXFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_previewX->SetFont(m_previewXFont);
#if wxVERSION_NUMBER >= 3000
    m_previewX->SetHint(wxT(""));
#endif

    flexGridSizer133->Add(m_previewX, 0, wxALL, WXC_FROM_DIP(2));
    m_previewX->SetMinSize(wxSize(70, -1));

    m_staticText1371 =
        new wxStaticText(this, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText1371Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1371->SetFont(m_staticText1371Font);

    flexGridSizer133->Add(m_staticText1371, 0, wxALL, WXC_FROM_DIP(5));

    m_previewY = new wxTextCtrl(this, wxID_ANY, wxT("2000.000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(70, -1)),
        wxTE_RIGHT | wxTE_READONLY);
    m_previewY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_previewY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_previewYFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_previewY->SetFont(m_previewYFont);
#if wxVERSION_NUMBER >= 3000
    m_previewY->SetHint(wxT(""));
#endif

    flexGridSizer133->Add(m_previewY, 0, wxALL, WXC_FROM_DIP(2));
    m_previewY->SetMinSize(wxSize(70, -1));

    m_staticText13712 =
        new wxStaticText(this, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText13712Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText13712->SetFont(m_staticText13712Font);

    flexGridSizer133->Add(m_staticText13712, 0, wxALL, WXC_FROM_DIP(5));

    m_previewZ = new wxTextCtrl(this, wxID_ANY, wxT("3333,333"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(70, -1)),
        wxTE_RIGHT | wxTE_READONLY);
    m_previewZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_previewZ->SetForegroundColour(wxColour(wxT("rgb(0,128,128)")));
    wxFont m_previewZFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_previewZ->SetFont(m_previewZFont);
#if wxVERSION_NUMBER >= 3000
    m_previewZ->SetHint(wxT(""));
#endif

    flexGridSizer133->Add(m_previewZ, 0, wxALL, WXC_FROM_DIP(2));
    m_previewZ->SetMinSize(wxSize(70, -1));

    m_staticText137123 =
        new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText137123Font(
        8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText137123->SetFont(m_staticText137123Font);

    flexGridSizer133->Add(m_staticText137123, 0, wxALL, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer7440 = new wxFlexGridSizer(2, 3, 0, 0);
    flexGridSizer7440->SetFlexibleDirection(wxBOTH);
    flexGridSizer7440->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer7419->Add(flexGridSizer7440, 0, wxALL | wxALIGN_TOP, WXC_FROM_DIP(2));

    m_staticLine74384 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_VERTICAL);

    flexGridSizer7440->Add(m_staticLine74384, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));

    wxFlexGridSizer* flexGridSizer7449 = new wxFlexGridSizer(2, 3, 0, 0);
    flexGridSizer7449->SetFlexibleDirection(wxBOTH);
    flexGridSizer7449->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer7440->Add(flexGridSizer7449, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_staticText7442 = new wxStaticText(this, wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText7442Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText7442->SetFont(m_staticText7442Font);

    flexGridSizer7449->Add(m_staticText7442, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_staticText7444 = new wxStaticText(this, wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText7444Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText7444->SetFont(m_staticText7444Font);

    flexGridSizer7449->Add(m_staticText7444, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_staticText7446 = new wxStaticText(this, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    wxFont m_staticText7446Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText7446->SetFont(m_staticText7446Font);

    flexGridSizer7449->Add(m_staticText7446, 0, wxALL | wxALIGN_CENTER, WXC_FROM_DIP(0));

    m_btZeroX = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("snap-orto")),
        wxDefaultPosition, wxDLG_UNIT(this, wxSize(24, 24)), 0);
    m_btZeroX->SetToolTip(_("Determie if 'X' axis will be zeroed"));
    m_btZeroX->SetValue(true);

    flexGridSizer7449->Add(m_btZeroX, 0, wxALL, WXC_FROM_DIP(2));
    m_btZeroX->SetMinSize(wxSize(24, 24));

    m_btZeroY = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("snap-orto")),
        wxDefaultPosition, wxDLG_UNIT(this, wxSize(24, 24)), 0);
    m_btZeroY->SetToolTip(_("Determie if 'Y' axis will be zeroed"));
    m_btZeroY->SetValue(true);

    flexGridSizer7449->Add(m_btZeroY, 0, wxALL, WXC_FROM_DIP(2));
    m_btZeroY->SetMinSize(wxSize(24, 24));

    m_btZeroZ = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("snap-orto")),
        wxDefaultPosition, wxDLG_UNIT(this, wxSize(24, 24)), 0);
    m_btZeroZ->SetToolTip(_("Determie if 'Z' axis will be zeroed"));
    m_btZeroZ->SetValue(true);

    flexGridSizer7449->Add(m_btZeroZ, 0, wxALL, WXC_FROM_DIP(2));
    m_btZeroZ->SetMinSize(wxSize(24, 24));

    m_staticLine7438 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_VERTICAL);

    flexGridSizer7440->Add(m_staticLine7438, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));

    m_continuousTimer = new wxTimer;
    m_continuousTimer->Start(1000, false);

    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    SetName(wxT("CncReferenceEvaluationBase"));
    SetMinClientSize(wxSize(-1, 400));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) {
	GetSizer()->Fit(this);
    }
    // Connect events
    m_notebookEvalMode->Bind(
        wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, &CncReferenceEvaluationBase::onSelectEvaluationMode, this);
    m_btTouchCorner->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onSelectTouchCorner, this);
    m_touchDiameter->Bind(wxEVT_KEY_DOWN, &CncReferenceEvaluationBase::onTouchDiameterKeyDown, this);
    m_touchDiameter->Bind(wxEVT_LEFT_DOWN, &CncReferenceEvaluationBase::onTouchDiameterLeftDown, this);
    m_tbPrevTest->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::onTogglePrevTest, this);
    m_btTouchTest->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onTouchTest, this);
    m_btTouchZ->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onTouchZ, this);
    m_btTouchXYZ->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onTouchXYZ, this);
    m_btDetachCamera->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::detachCameraCapture, this);
    m_btShowCrossHV->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::updateCameraParameter, this);
    m_btShowCrossDD->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::updateCameraParameter, this);
    m_btShowRect->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::updateCameraParameter, this);
    m_btMode1->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode1, this);
    m_btMode2->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode2, this);
    m_btMode3->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode3, this);
    m_btMode4->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode4, this);
    m_btMode5->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode5, this);
    m_btMode6->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode6, this);
    m_workpiceThickness->Bind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_measuremetOffsetX->Bind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_measuremetOffsetY->Bind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_measuremetOffsetZ->Bind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_btZeroX->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::toggleZeroX, this);
    m_btZeroY->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::toggleZeroY, this);
    m_btZeroZ->Bind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::toggleZeroZ, this);
    m_continuousTimer->Bind(wxEVT_TIMER, &CncReferenceEvaluationBase::onContinuousTimer, this);
}

CncReferenceEvaluationBase::~CncReferenceEvaluationBase()
{
    m_notebookEvalMode->Unbind(
        wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, &CncReferenceEvaluationBase::onSelectEvaluationMode, this);
    m_btTouchCorner->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onSelectTouchCorner, this);
    m_touchDiameter->Unbind(wxEVT_KEY_DOWN, &CncReferenceEvaluationBase::onTouchDiameterKeyDown, this);
    m_touchDiameter->Unbind(wxEVT_LEFT_DOWN, &CncReferenceEvaluationBase::onTouchDiameterLeftDown, this);
    m_tbPrevTest->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::onTogglePrevTest, this);
    m_btTouchTest->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onTouchTest, this);
    m_btTouchZ->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onTouchZ, this);
    m_btTouchXYZ->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::onTouchXYZ, this);
    m_btDetachCamera->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &CncReferenceEvaluationBase::detachCameraCapture, this);
    m_btShowCrossHV->Unbind(
        wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::updateCameraParameter, this);
    m_btShowCrossDD->Unbind(
        wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::updateCameraParameter, this);
    m_btShowRect->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::updateCameraParameter, this);
    m_btMode1->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode1, this);
    m_btMode2->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode2, this);
    m_btMode3->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode3, this);
    m_btMode4->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode4, this);
    m_btMode5->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode5, this);
    m_btMode6->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::mode6, this);
    m_workpiceThickness->Unbind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_measuremetOffsetX->Unbind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_measuremetOffsetY->Unbind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_measuremetOffsetZ->Unbind(wxEVT_COMMAND_TEXT_UPDATED, &CncReferenceEvaluationBase::updateParameter, this);
    m_btZeroX->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::toggleZeroX, this);
    m_btZeroY->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::toggleZeroY, this);
    m_btZeroZ->Unbind(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, &CncReferenceEvaluationBase::toggleZeroZ, this);
    m_continuousTimer->Unbind(wxEVT_TIMER, &CncReferenceEvaluationBase::onContinuousTimer, this);

    m_continuousTimer->Stop();
    wxDELETE(m_continuousTimer);
}
