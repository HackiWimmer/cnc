//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterPathGenerator.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterPathGenerator.h"

// Declare the bitmap loading function
extern void wxCB63AInitBitmapResources();

static bool bBitmapLoaded = false;

PathGeneratorFrameBase::PathGeneratorFrameBase(wxWindow* parent,
    wxWindowID id,
    const wxString& title,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
	// We need to initialise the default bitmap handler
	wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
	wxCB63AInitBitmapResources();
	bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
	wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("16-archive"));
	wxIcon icn;
	icn.CopyFromBitmap(iconBmp);
	app_icons.AddIcon(icn);
    }
    SetIcons(app_icons);

    this->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));

    wxFlexGridSizer* flexGridSizer980 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer980->SetFlexibleDirection(wxBOTH);
    flexGridSizer980->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer980->AddGrowableCol(0);
    flexGridSizer980->AddGrowableRow(0);
    this->SetSizer(flexGridSizer980);

    m_mainSplitter = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxSP_3D);
    m_mainSplitter->SetSashGravity(0.2);
    m_mainSplitter->SetMinimumPaneSize(24);

    flexGridSizer980->Add(m_mainSplitter, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_leftMainSplitterPage = new wxPanel(
        m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    wxFlexGridSizer* flexGridSizer3302 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3302->SetFlexibleDirection(wxBOTH);
    flexGridSizer3302->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3302->AddGrowableCol(0);
    flexGridSizer3302->AddGrowableRow(2);
    m_leftMainSplitterPage->SetSizer(flexGridSizer3302);

    wxFlexGridSizer* flexGridSizer3315 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer3315->SetFlexibleDirection(wxBOTH);
    flexGridSizer3315->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3315->AddGrowableCol(1);

    flexGridSizer3302->Add(flexGridSizer3315, 1, wxALL | wxEXPAND | wxALIGN_LEFT, WXC_FROM_DIP(0));

    m_btPGMinimizeTree = new wxButton(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_leftMainSplitterPage, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGMinimizeTree->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_btPGMinimizeTree->SetBitmapMargins(2, 2);
#endif
    m_btPGMinimizeTree->SetToolTip(_("Minimize Tree"));

    flexGridSizer3315->Add(m_btPGMinimizeTree, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGMinimizeTree->SetMinSize(wxSize(24, 24));

    m_treeSearchText = new wxTextCtrl(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_leftMainSplitterPage, wxSize(-1, 22)), wxTE_MULTILINE);
    m_treeSearchText->SetToolTip(_("Search First in Tree"));

    flexGridSizer3315->Add(m_treeSearchText, 0, wxALL | wxEXPAND, WXC_FROM_DIP(2));
    m_treeSearchText->SetMinSize(wxSize(-1, 22));

    m_btSearchTree = new wxButton(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_leftMainSplitterPage, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btSearchTree->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cscope")), wxLEFT);
    m_btSearchTree->SetBitmapMargins(2, 2);
#endif
    m_btSearchTree->SetToolTip(_("Search Next in Tree"));

    flexGridSizer3315->Add(m_btSearchTree, 0, wxALL, WXC_FROM_DIP(1));
    m_btSearchTree->SetMinSize(wxSize(24, 24));

    flexGridSizer3302->Add(0, 3, 1, wxALL, WXC_FROM_DIP(0));

    m_templateTree = new wxTreeCtrl(m_leftMainSplitterPage, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_leftMainSplitterPage, wxSize(-1, -1)), wxTR_DEFAULT_STYLE);
    m_templateTree->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));

    flexGridSizer3302->Add(m_templateTree, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_rightMainSplitterPage = new wxPanel(
        m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_mainSplitter->SplitVertically(m_leftMainSplitterPage, m_rightMainSplitterPage, 0);

    wxFlexGridSizer* flexGridSizer3296 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3296->SetFlexibleDirection(wxBOTH);
    flexGridSizer3296->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3296->AddGrowableCol(0);
    flexGridSizer3296->AddGrowableRow(0);
    m_rightMainSplitterPage->SetSizer(flexGridSizer3296);

    m_splitter3185 = new wxSplitterWindow(m_rightMainSplitterPage, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_rightMainSplitterPage, wxSize(-1, -1)), wxSP_3D);
    m_splitter3185->SetSashGravity(0.65);
    m_splitter3185->SetMinimumPaneSize(6);

    flexGridSizer3296->Add(m_splitter3185, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_splitterPage3189 = new wxPanel(
        m_splitter3185, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter3185, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    wxFlexGridSizer* flexGridSizer973 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer973->SetFlexibleDirection(wxBOTH);
    flexGridSizer973->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer973->AddGrowableCol(0);
    flexGridSizer973->AddGrowableRow(1);
    m_splitterPage3189->SetSizer(flexGridSizer973);

    wxFlexGridSizer* flexGridSizer3093 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3093->SetFlexibleDirection(wxBOTH);
    flexGridSizer3093->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3093->AddGrowableCol(0);
    flexGridSizer3093->AddGrowableRow(0);

    flexGridSizer973->Add(flexGridSizer3093, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxArrayString m_pgPathSelectorArr;
    m_pgPathSelector = new wxComboBox(m_splitterPage3189, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage3189, wxSize(-1, -1)), m_pgPathSelectorArr, wxCB_SORT | wxCB_READONLY);
    m_pgPathSelector->SetToolTip(_("Path Selector"));
    m_pgPathSelector->Hide();
    m_pgPathSelector->Enable(false);

    flexGridSizer3093->Add(m_pgPathSelector, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxFlexGridSizer* flexGridSizer2825 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2825->SetFlexibleDirection(wxBOTH);
    flexGridSizer2825->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer2825->AddGrowableCol(0);
    flexGridSizer2825->AddGrowableRow(0);

    flexGridSizer973->Add(flexGridSizer2825, 1, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_splitter2932 = new wxSplitterWindow(
        m_splitterPage3189, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage3189, wxSize(-1, -1)), wxSP_3D);
    m_splitter2932->SetSashGravity(0.7);
    m_splitter2932->SetMinimumPaneSize(10);

    flexGridSizer2825->Add(m_splitter2932, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_splitterPage2936 = new wxPanel(
        m_splitter2932, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter2932, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    wxFlexGridSizer* flexGridSizer2942 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2942->SetFlexibleDirection(wxBOTH);
    flexGridSizer2942->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer2942->AddGrowableCol(0);
    flexGridSizer2942->AddGrowableRow(0);
    m_splitterPage2936->SetSizer(flexGridSizer2942);

    m_pgMainBook = new wxNotebook(
        m_splitterPage2936, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage2936, wxSize(-1, -1)), wxBK_DEFAULT);
    m_pgMainBook->SetName(wxT("m_pgMainBook"));
    wxImageList* m_pgMainBook_il = new wxImageList(16, 16);
    m_pgMainBook->AssignImageList(m_pgMainBook_il);

    flexGridSizer2942->Add(m_pgMainBook, 0, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_pgPreviewPage = new wxPanel(
        m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    int m_pgPreviewPageImgIndex;
    m_pgPreviewPageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")));
    m_pgMainBook->AddPage(m_pgPreviewPage, _("Preview"), false, m_pgPreviewPageImgIndex);

    wxFlexGridSizer* flexGridSizer3332 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3332->SetFlexibleDirection(wxBOTH);
    flexGridSizer3332->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3332->AddGrowableCol(0);
    flexGridSizer3332->AddGrowableRow(0);
    m_pgPreviewPage->SetSizer(flexGridSizer3332);

#if wxUSE_WEBVIEW
    m_pgPreview = wxWebView::New(m_pgPreviewPage, wxID_ANY, _("about:blank"), wxDefaultPosition,
        wxDLG_UNIT(m_pgPreviewPage, wxSize(-1, -1)), wxWebViewBackendDefault, 0);

    flexGridSizer3332->Add(m_pgPreview, 1, wxALL | wxEXPAND, WXC_FROM_DIP(1));
#endif // wxUSE_WEBVIEW

    m_pgAdditionalCodePage = new wxPanel(
        m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    int m_pgAdditionalCodePageImgIndex;
    m_pgAdditionalCodePageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-archive")));
    m_pgMainBook->AddPage(m_pgAdditionalCodePage, _("Additional Code"), false, m_pgAdditionalCodePageImgIndex);

    wxFlexGridSizer* flexGridSizer3414 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3414->SetFlexibleDirection(wxBOTH);
    flexGridSizer3414->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3414->AddGrowableCol(0);
    flexGridSizer3414->AddGrowableRow(0);
    m_pgAdditionalCodePage->SetSizer(flexGridSizer3414);

    m_aditionalCode = new wxTextCtrl(m_pgAdditionalCodePage, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_pgAdditionalCodePage, wxSize(-1, -1)), wxTE_RICH | wxTE_MULTILINE | wxTE_DONTWRAP);
    m_aditionalCode->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_aditionalCode->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_aditionalCodeFont(
        10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_aditionalCode->SetFont(m_aditionalCodeFont);

    flexGridSizer3414->Add(m_aditionalCode, 1, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_pgAdditionalInfoPage = new wxPanel(
        m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    int m_pgAdditionalInfoPageImgIndex;
    m_pgAdditionalInfoPageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-info")));
    m_pgMainBook->AddPage(m_pgAdditionalInfoPage, _("Build Info"), false, m_pgAdditionalInfoPageImgIndex);

    wxFlexGridSizer* flexGridSizer3336 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3336->SetFlexibleDirection(wxBOTH);
    flexGridSizer3336->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3336->AddGrowableCol(0);
    flexGridSizer3336->AddGrowableRow(0);
    m_pgAdditionalInfoPage->SetSizer(flexGridSizer3336);

    m_additionalInfo = new wxTextCtrl(m_pgAdditionalInfoPage, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_pgAdditionalInfoPage, wxSize(-1, -1)),
        wxTE_RICH | wxTE_READONLY | wxTE_MULTILINE | wxHSCROLL | wxVSCROLL);
    m_additionalInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_additionalInfo->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_additionalInfoFont(
        10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_additionalInfo->SetFont(m_additionalInfoFont);

    flexGridSizer3336->Add(m_additionalInfo, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_splitterPage2940 = new wxPanel(
        m_splitter2932, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter2932, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_splitterPage2940->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_splitter2932->SplitHorizontally(m_splitterPage2936, m_splitterPage2940, 0);

    wxFlexGridSizer* flexGridSizer2944 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2944->SetFlexibleDirection(wxBOTH);
    flexGridSizer2944->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer2944->AddGrowableCol(0);
    flexGridSizer2944->AddGrowableRow(1);
    m_splitterPage2940->SetSizer(flexGridSizer2944);

    wxFlexGridSizer* flexGridSizer3395 = new wxFlexGridSizer(0, 5, 0, 0);
    flexGridSizer3395->SetFlexibleDirection(wxBOTH);
    flexGridSizer3395->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3395->AddGrowableCol(2);

    flexGridSizer2944->Add(flexGridSizer3395, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    m_staticText3401 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Template:"), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage2940, wxSize(-1, -1)), 0);
    m_staticText3401->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText3401Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3401->SetFont(m_staticText3401Font);

    flexGridSizer3395->Add(m_staticText3401, 0, wxALL, WXC_FROM_DIP(5));

    flexGridSizer3395->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer3406 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3406->SetFlexibleDirection(wxBOTH);
    flexGridSizer3406->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3406->AddGrowableCol(0);
    flexGridSizer3406->AddGrowableRow(1);

    flexGridSizer3395->Add(flexGridSizer3406, 0, wxALL | wxEXPAND | wxALIGN_LEFT, WXC_FROM_DIP(0));

    flexGridSizer3406->Add(0, 5, 1, wxALL, WXC_FROM_DIP(0));

    m_currentTemplate = new wxTextCtrl(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage2940, wxSize(-1, -1)), wxTE_READONLY | wxBORDER_NONE);
    m_currentTemplate->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_currentTemplate->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_currentTemplateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_currentTemplate->SetFont(m_currentTemplateFont);
    m_currentTemplate->SetToolTip(_("Current Template"));
#if wxVERSION_NUMBER >= 3000
    m_currentTemplate->SetHint(wxT(""));
#endif

    flexGridSizer3406->Add(m_currentTemplate, 0, wxALL | wxEXPAND | wxALIGN_LEFT, WXC_FROM_DIP(0));

    flexGridSizer3406->Add(0, 2, 1, wxALL, WXC_FROM_DIP(0));

    wxFlexGridSizer* flexGridSizer33851 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer33851->SetFlexibleDirection(wxBOTH);
    flexGridSizer33851->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer3395->Add(flexGridSizer33851, 1, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(0));

    m_staticText33892 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Edit mode:"), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage2940, wxSize(-1, -1)), 0);
    m_staticText33892->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText33892Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText33892->SetFont(m_staticText33892Font);

    flexGridSizer33851->Add(m_staticText33892, 0, wxALL, WXC_FROM_DIP(5));

    wxArrayString m_cbEditModeArr;
    m_cbEditModeArr.Add(_("Readonly"));
    m_cbEditModeArr.Add(_("Writable"));
    m_cbEditMode = new wxComboBox(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage2940, wxSize(-1, -1)), m_cbEditModeArr, wxCB_READONLY);
    wxFont m_cbEditModeFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbEditMode->SetFont(m_cbEditModeFont);
    m_cbEditMode->SetSelection(0);

    flexGridSizer33851->Add(m_cbEditMode, 0, wxALL, WXC_FROM_DIP(1));

    m_updatePreview = new wxButton(
        m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(22, 22)), 0);
#if wxVERSION_NUMBER >= 2904
    m_updatePreview->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-show_current_line")), wxLEFT);
    m_updatePreview->SetBitmapMargins(2, 2);
#endif
    m_updatePreview->SetToolTip(_("Update Preview without Generate"));

    flexGridSizer33851->Add(m_updatePreview, 0, wxALL, WXC_FROM_DIP(0));
    m_updatePreview->SetMinSize(wxSize(22, 22));

    wxFlexGridSizer* flexGridSizer3385 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer3385->SetFlexibleDirection(wxBOTH);
    flexGridSizer3385->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer3395->Add(flexGridSizer3385, 1, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(0));

    m_staticText3389 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Display mode:"), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage2940, wxSize(-1, -1)), 0);
    m_staticText3389->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText3389Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3389->SetFont(m_staticText3389Font);

    flexGridSizer3385->Add(m_staticText3389, 0, wxALL, WXC_FROM_DIP(5));

    wxArrayString m_cbDisplayModeArr;
    m_cbDisplayModeArr.Add(_("Preview"));
    m_cbDisplayModeArr.Add(_("Result"));
    m_cbDisplayMode = new wxComboBox(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage2940, wxSize(-1, -1)), m_cbDisplayModeArr, wxCB_READONLY);
    wxFont m_cbDisplayModeFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbDisplayMode->SetFont(m_cbDisplayModeFont);
    m_cbDisplayMode->SetSelection(0);

    flexGridSizer3385->Add(m_cbDisplayMode, 0, wxALL, WXC_FROM_DIP(1));

    m_tbOutput = new wxToolbook(m_splitterPage2940, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage2940, wxSize(-1, -1)), wxTBK_BUTTONBAR | wxBK_LEFT);
    m_tbOutput->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_tbOutput->SetName(wxT("m_tbOutput"));
    wxImageList* m_tbOutput_il = new wxImageList(16, 16);
    m_tbOutput->AssignImageList(m_tbOutput_il);

    flexGridSizer2944->Add(m_tbOutput, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_panelPreview =
        new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_panelPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelPreviewImgIndex;
    m_panelPreviewImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-fold")));
    m_tbOutput->AddPage(m_panelPreview, _("Preview"), true, m_panelPreviewImgIndex);

    wxFlexGridSizer* flexGridSizer3233 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3233->SetFlexibleDirection(wxBOTH);
    flexGridSizer3233->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3233->AddGrowableCol(0);
    flexGridSizer3233->AddGrowableRow(0);
    m_panelPreview->SetSizer(flexGridSizer3233);

    m_generatedPreview =
        new wxTextCtrl(m_panelPreview, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelPreview, wxSize(-1, -1)),
            wxTE_RICH | wxTE_READONLY | wxTE_MULTILINE | wxBORDER_NONE | wxALWAYS_SHOW_SB | wxHSCROLL | wxVSCROLL);
    m_generatedPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_generatedPreview->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_generatedPreviewFont(
        10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_generatedPreview->SetFont(m_generatedPreviewFont);

    flexGridSizer3233->Add(m_generatedPreview, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_panelResult =
        new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_panelResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelResultImgIndex;
    m_panelResultImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-globals")));
    m_tbOutput->AddPage(m_panelResult, _("Result"), false, m_panelResultImgIndex);

    wxFlexGridSizer* flexGridSizer3235 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3235->SetFlexibleDirection(wxBOTH);
    flexGridSizer3235->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3235->AddGrowableCol(0);
    flexGridSizer3235->AddGrowableRow(0);
    m_panelResult->SetSizer(flexGridSizer3235);

    m_generatedResult =
        new wxTextCtrl(m_panelResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelResult, wxSize(-1, -1)),
            wxTE_RICH | wxTE_READONLY | wxTE_MULTILINE | wxBORDER_NONE | wxALWAYS_SHOW_SB | wxHSCROLL | wxVSCROLL);
    m_generatedResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_generatedResult->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_generatedResultFont(
        10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_generatedResult->SetFont(m_generatedResultFont);

    flexGridSizer3235->Add(m_generatedResult, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_panelInfo =
        new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_panelInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelInfoImgIndex;
    m_panelInfoImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-info")));
    m_tbOutput->AddPage(m_panelInfo, _("Info"), false, m_panelInfoImgIndex);

    wxFlexGridSizer* flexGridSizer3286 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3286->SetFlexibleDirection(wxBOTH);
    flexGridSizer3286->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer3286->AddGrowableCol(0);
    flexGridSizer3286->AddGrowableRow(0);
    m_panelInfo->SetSizer(flexGridSizer3286);

    m_processInfo = new wxTextCtrl(m_panelInfo, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_panelInfo, wxSize(-1, -1)), wxTE_RICH | wxTE_READONLY | wxTE_MULTILINE | wxBORDER_NONE);
    m_processInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_processInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_processInfo->SetFont(m_processInfoFont);

    flexGridSizer3286->Add(m_processInfo, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_splitterPage3193 = new wxPanel(
        m_splitter3185, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter3185, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_splitter3185->SplitVertically(m_splitterPage3189, m_splitterPage3193, 0);

    wxFlexGridSizer* flexGridSizer986 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer986->SetFlexibleDirection(wxBOTH);
    flexGridSizer986->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer986->AddGrowableCol(0);
    flexGridSizer986->AddGrowableRow(1);
    m_splitterPage3193->SetSizer(flexGridSizer986);

    wxFlexGridSizer* flexGridSizer2874 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer2874->SetFlexibleDirection(wxBOTH);
    flexGridSizer2874->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer2874->AddGrowableCol(4);
    flexGridSizer2874->AddGrowableRow(0);

    flexGridSizer986->Add(flexGridSizer2874, 0, wxALL | wxEXPAND | wxALIGN_BOTTOM, WXC_FROM_DIP(1));

    m_btPGGenerate = new wxButton(
        m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGGenerate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cog")), wxLEFT);
    m_btPGGenerate->SetBitmapMargins(2, 2);
#endif
    m_btPGGenerate->SetToolTip(_("Generate"));

    flexGridSizer2874->Add(m_btPGGenerate, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGGenerate->SetMinSize(wxSize(24, 24));

    m_btPGClear = new wxButton(
        m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btPGClear->SetBitmapMargins(2, 2);
#endif
    m_btPGClear->SetToolTip(_("Clear"));

    flexGridSizer2874->Add(m_btPGClear, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGClear->SetMinSize(wxSize(24, 24));

    m_btPGReplaceEdit = new wxButton(
        m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGReplaceEdit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-marker")), wxLEFT);
    m_btPGReplaceEdit->SetBitmapMargins(2, 2);
#endif
    m_btPGReplaceEdit->SetToolTip(_("Replace at Edit Control"));

    flexGridSizer2874->Add(m_btPGReplaceEdit, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGReplaceEdit->SetMinSize(wxSize(24, 24));

    m_btPGCopy = new wxButton(
        m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGCopy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-copy")), wxLEFT);
    m_btPGCopy->SetBitmapMargins(2, 2);
#endif
    m_btPGCopy->SetToolTip(_("Copy"));

    flexGridSizer2874->Add(m_btPGCopy, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGCopy->SetMinSize(wxSize(24, 24));

    m_btPGSave = new wxButton(
        m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGSave->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_btPGSave->SetBitmapMargins(2, 2);
#endif
    m_btPGSave->SetToolTip(_("Save Template"));

    flexGridSizer2874->Add(m_btPGSave, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGSave->SetMinSize(wxSize(24, 24));

    wxFlexGridSizer* flexGridSizer3225 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer3225->SetFlexibleDirection(wxBOTH);
    flexGridSizer3225->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);

    flexGridSizer2874->Add(flexGridSizer3225, 0, wxALL | wxALIGN_RIGHT | wxALIGN_BOTTOM, WXC_FROM_DIP(0));

    m_btPGMinimize = new wxButton(
        m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGMinimize->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_btPGMinimize->SetBitmapMargins(2, 2);
#endif
    m_btPGMinimize->SetToolTip(_("Toggle Size"));

    flexGridSizer3225->Add(m_btPGMinimize, 0, wxALL | wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    m_btPGMinimize->SetMinSize(wxSize(24, 24));

    m_btPGClose = new wxButton(
        m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24, 24)), 0);
#if wxVERSION_NUMBER >= 2904
    m_btPGClose->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_close")), wxLEFT);
    m_btPGClose->SetBitmapMargins(2, 2);
#endif
    m_btPGClose->SetToolTip(_("Close"));

    flexGridSizer3225->Add(m_btPGClose, 0, wxALL | wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    m_btPGClose->SetMinSize(wxSize(24, 24));

    wxFlexGridSizer* flexGridSizer2972 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2972->SetFlexibleDirection(wxBOTH);
    flexGridSizer2972->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer2972->AddGrowableCol(0);
    flexGridSizer2972->AddGrowableRow(0);

    flexGridSizer986->Add(flexGridSizer2972, 1, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    wxArrayString m_pgParameterMgrArr;
    wxUnusedVar(m_pgParameterMgrArr);
    wxArrayInt m_pgParameterMgrIntArr;
    wxUnusedVar(m_pgParameterMgrIntArr);
    m_pgParameterMgr = new wxPropertyGridManager(m_splitterPage3193, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage3193, wxSize(-1, -1)),
        wxPG_DESCRIPTION | wxPG_LIMITED_EDITING | wxPG_TOOLTIPS | wxPG_SPLITTER_AUTO_CENTER | wxPG_BOLD_MODIFIED);
    wxFont m_pgParameterMgrFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_pgParameterMgr->SetFont(m_pgParameterMgrFont);

    flexGridSizer2972->Add(m_pgParameterMgr, 0, wxALL | wxEXPAND, WXC_FROM_DIP(1));

    m_pgCatCommon = m_pgParameterMgr->Append(new wxPropertyCategory(_("Common Path Parameters:")));
    m_pgCatCommon->SetHelpString(wxT(""));

    m_pgPropToolDiameter = m_pgParameterMgr->AppendIn(
        m_pgCatCommon, new wxStringProperty(_("Tool Diameter [mm]"), wxPG_LABEL, _("3.125")));
    m_pgPropToolDiameter->SetHelpString(wxT(""));

    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("none"));
    m_pgParameterMgrArr.Add(_("inner"));
    m_pgParameterMgrArr.Add(_("outer"));
    m_pgPropCorrectionMode = m_pgParameterMgr->AppendIn(m_pgCatCommon,
        new wxEnumProperty(_("Tool Correction"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0));
    m_pgPropCorrectionMode->SetHelpString(wxT(""));

    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("Round"));
    m_pgParameterMgrArr.Add(_("Square"));
    m_pgParameterMgrArr.Add(_("Miter"));
    m_pgPropCorrectionJointType = m_pgParameterMgr->AppendIn(m_pgCatCommon,
        new wxEnumProperty(
            _("Tool Correction Joint Type"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0));
    m_pgPropCorrectionJointType->SetHelpString(wxT(""));

    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("0.001"));
    m_pgParameterMgrArr.Add(_("0.002"));
    m_pgParameterMgrArr.Add(_("0.003"));
    m_pgParameterMgrArr.Add(_("0.004"));
    m_pgParameterMgrArr.Add(_("0.005"));
    m_pgParameterMgrArr.Add(_("0.006"));
    m_pgParameterMgrArr.Add(_("0.007"));
    m_pgParameterMgrArr.Add(_("0.008"));
    m_pgParameterMgrArr.Add(_("0.009"));
    m_pgParameterMgrArr.Add(_("0.010"));
    m_pgParameterMgrArr.Add(_("0.020"));
    m_pgParameterMgrArr.Add(_("0.030"));
    m_pgParameterMgrArr.Add(_("0.050"));
    m_pgParameterMgrArr.Add(_("0.060"));
    m_pgParameterMgrArr.Add(_("0.070"));
    m_pgParameterMgrArr.Add(_("0.080"));
    m_pgParameterMgrArr.Add(_("0.090"));
    m_pgParameterMgrArr.Add(_("0.100"));
    m_pgPropCLResolution = m_pgParameterMgr->AppendIn(m_pgCatCommon,
        new wxEnumProperty(_("Curve Lib Resolution"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0));
    m_pgPropCLResolution->SetHelpString(wxT(""));

    m_pgPropPathColour = m_pgParameterMgr->AppendIn(
        m_pgCatCommon, new wxSystemColourProperty(_("Colour"), wxPG_LABEL, wxColour(wxT("rgb(0,0,0)"))));
    m_pgPropPathColour->SetHelpString(wxT(""));
    m_pgPropPathColour->SetEditor(wxT("ChoiceAndButton"));

    m_pgPropConfigBlock =
        m_pgParameterMgr->AppendIn(m_pgCatCommon, new wxBoolProperty(_("Config Block"), wxPG_LABEL, 1));
    m_pgPropConfigBlock->SetHelpString(wxT(""));

    m_pgCatPath = m_pgParameterMgr->Append(new wxPropertyCategory(_("Path Template Parameters")));
    m_pgCatPath->SetHelpString(wxT(""));

    m_pgProp01 = m_pgParameterMgr->AppendIn(m_pgCatPath, new wxStringProperty(_("Dummy Para"), wxPG_LABEL, _("0")));
    m_pgProp01->SetHelpString(wxT(""));

    m_pgCatGrid = m_pgParameterMgr->Append(new wxPropertyCategory(_("Grid")));
    m_pgCatGrid->SetHelpString(wxT(""));

    m_pgPropRefCross = m_pgParameterMgr->AppendIn(m_pgCatGrid, new wxBoolProperty(_("Reference Cross"), wxPG_LABEL, 1));
    m_pgPropRefCross->SetHelpString(wxT(""));

    m_pgPropGridHelpConstructs =
        m_pgParameterMgr->AppendIn(m_pgCatGrid, new wxBoolProperty(_("Help Constructs"), wxPG_LABEL, 1));
    m_pgPropGridHelpConstructs->SetHelpString(wxT(""));

    m_pgPropGridDisplay = m_pgParameterMgr->AppendIn(m_pgCatGrid, new wxBoolProperty(_("Display Grid"), wxPG_LABEL, 1));
    m_pgPropGridDisplay->SetHelpString(wxT(""));

    m_pgPropGridSize =
        m_pgParameterMgr->AppendIn(m_pgCatGrid, new wxStringProperty(_("Size [mm]"), wxPG_LABEL, wxT("")));
    m_pgPropGridSize->SetHelpString(wxT(""));

    m_pgCatCncBlock = m_pgParameterMgr->Append(new wxPropertyCategory(_("Cnc Block")));
    m_pgCatCncBlock->SetHelpString(wxT(""));

    m_pgPropCncInclude = m_pgParameterMgr->AppendIn(m_pgCatCncBlock, new wxBoolProperty(_("Include"), wxPG_LABEL, 1));
    m_pgPropCncInclude->SetHelpString(wxT(""));

    m_pgCatCncParameter = m_pgParameterMgr->AppendIn(m_pgCatCncBlock, new wxPropertyCategory(_("Parameter")));
    m_pgCatCncParameter->SetHelpString(wxT(""));

    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("z - relative"));
    m_pgParameterMgrArr.Add(_("Z - absolute"));
    m_pgPropCncZDepthMode = m_pgParameterMgr->AppendIn(m_pgCatCncParameter,
        new wxEnumProperty(_("Z Depth Mode"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0));
    m_pgPropCncZDepthMode->SetHelpString(wxT(""));

    m_pgPropCncZDepth =
        m_pgParameterMgr->AppendIn(m_pgCatCncParameter, new wxStringProperty(_("Z Depth"), wxPG_LABEL, _("0")));
    m_pgPropCncZDepth->SetHelpString(wxT(""));

    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("none"));
    m_pgParameterMgrArr.Add(_("inner"));
    m_pgParameterMgrArr.Add(_("outer"));
    m_pgPropCncToolCorrection = m_pgParameterMgr->AppendIn(m_pgCatCncParameter,
        new wxEnumProperty(_("Tool Correction Flag"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0));
    m_pgPropCncToolCorrection->SetHelpString(wxT(""));

    m_pgPropCncReversePath =
        m_pgParameterMgr->AppendIn(m_pgCatCncParameter, new wxBoolProperty(_("Reverse Path"), wxPG_LABEL, 0));
    m_pgPropCncReversePath->SetHelpString(wxT(""));

    m_pgCatSvg = m_pgParameterMgr->Append(new wxPropertyCategory(_("<SVG/>")));
    m_pgCatSvg->SetHelpString(wxT(""));

    m_pgPropSvgWidth =
        m_pgParameterMgr->AppendIn(m_pgCatSvg, new wxStringProperty(_("Width [mm]"), wxPG_LABEL, wxT("")));
    m_pgPropSvgWidth->SetHelpString(wxT(""));
    m_pgPropSvgWidth->SetEditor(wxT("TextCtrl"));

    m_pgPropSvgHeight =
        m_pgParameterMgr->AppendIn(m_pgCatSvg, new wxStringProperty(_("Height [mm]"), wxPG_LABEL, wxT("")));
    m_pgPropSvgHeight->SetHelpString(wxT(""));
    m_pgPropSvgHeight->SetEditor(wxT("TextCtrl"));

    m_pgCatViewBox = m_pgParameterMgr->AppendIn(m_pgCatSvg, new wxPropertyCategory(_("ViewBox")));
    m_pgCatViewBox->SetHelpString(wxT(""));

    m_pgPropSvgVbX = m_pgParameterMgr->AppendIn(m_pgCatViewBox, new wxStringProperty(_("X"), wxPG_LABEL, wxT("")));
    m_pgPropSvgVbX->SetHelpString(wxT(""));

    m_pgPropSvgVbY = m_pgParameterMgr->AppendIn(m_pgCatViewBox, new wxStringProperty(_("Y"), wxPG_LABEL, wxT("")));
    m_pgPropSvgVbY->SetHelpString(wxT(""));

    m_pgPropSvgVbW = m_pgParameterMgr->AppendIn(m_pgCatViewBox, new wxStringProperty(_("W"), wxPG_LABEL, wxT("")));
    m_pgPropSvgVbW->SetHelpString(wxT(""));

    m_pgPropSvgVbH = m_pgParameterMgr->AppendIn(m_pgCatViewBox, new wxStringProperty(_("H"), wxPG_LABEL, wxT("")));
    m_pgPropSvgVbH->SetHelpString(wxT(""));

    m_pgCatTransform = m_pgParameterMgr->AppendIn(m_pgCatSvg, new wxPropertyCategory(_("Transform")));
    m_pgCatTransform->SetHelpString(wxT(""));

    m_pgPropTransformMode =
        m_pgParameterMgr->AppendIn(m_pgCatTransform, new wxBoolProperty(_("Auto Mode"), wxPG_LABEL, 1));
    m_pgPropTransformMode->SetHelpString(wxT(""));

    m_pgCatTranslate = m_pgParameterMgr->AppendIn(m_pgCatTransform, new wxPropertyCategory(_("Translate")));
    m_pgCatTranslate->SetHelpString(wxT(""));

    m_pgPropTranslateX =
        m_pgParameterMgr->AppendIn(m_pgCatTranslate, new wxStringProperty(_("X [mm]"), wxPG_LABEL, _("0")));
    m_pgPropTranslateX->SetHelpString(wxT(""));
    m_pgPropTranslateX->SetEditor(wxT("TextCtrl"));

    m_pgPropTranslateY =
        m_pgParameterMgr->AppendIn(m_pgCatTranslate, new wxStringProperty(_("Y [mm]"), wxPG_LABEL, _("0")));
    m_pgPropTranslateY->SetHelpString(wxT(""));
    m_pgPropTranslateY->SetEditor(wxT("TextCtrl"));

    m_pgCatScale = m_pgParameterMgr->AppendIn(m_pgCatTransform, new wxPropertyCategory(_("Scale")));
    m_pgCatScale->SetHelpString(wxT(""));

    m_pgPropScaleX =
        m_pgParameterMgr->AppendIn(m_pgCatScale, new wxStringProperty(_("X [factor]"), wxPG_LABEL, _("1")));
    m_pgPropScaleX->SetHelpString(wxT(""));
    m_pgPropScaleX->SetEditor(wxT("TextCtrl"));

    m_pgPropScaleY =
        m_pgParameterMgr->AppendIn(m_pgCatScale, new wxStringProperty(_("Y [factor]"), wxPG_LABEL, _("1")));
    m_pgPropScaleY->SetHelpString(wxT(""));
    m_pgPropScaleY->SetEditor(wxT("TextCtrl"));

    m_pgCatRotate = m_pgParameterMgr->AppendIn(m_pgCatTransform, new wxPropertyCategory(_("Rotate")));
    m_pgCatRotate->SetHelpString(wxT(""));

    m_pgPropRotateA =
        m_pgParameterMgr->AppendIn(m_pgCatRotate, new wxStringProperty(_("Angle [degree]"), wxPG_LABEL, _("0")));
    m_pgPropRotateA->SetHelpString(wxT(""));
    m_pgPropRotateA->SetEditor(wxT("TextCtrl"));

    m_pgPropRotateX =
        m_pgParameterMgr->AppendIn(m_pgCatRotate, new wxStringProperty(_("Translate X [mm]"), wxPG_LABEL, _("0")));
    m_pgPropRotateX->SetHelpString(wxT(""));
    m_pgPropRotateX->SetEditor(wxT("TextCtrl"));

    m_pgPropRotateY =
        m_pgParameterMgr->AppendIn(m_pgCatRotate, new wxStringProperty(_("Translate Y [mm]"), wxPG_LABEL, _("0")));
    m_pgPropRotateY->SetHelpString(wxT(""));
    m_pgPropRotateY->SetEditor(wxT("TextCtrl"));

    m_pgCatSkrew = m_pgParameterMgr->AppendIn(m_pgCatTransform, new wxPropertyCategory(_("Skrew")));
    m_pgCatSkrew->SetHelpString(wxT(""));

    m_pgPropSkewX = m_pgParameterMgr->AppendIn(m_pgCatSkrew, new wxStringProperty(_("X [degree]"), wxPG_LABEL, _("0")));
    m_pgPropSkewX->SetHelpString(wxT(""));
    m_pgPropSkewX->SetEditor(wxT("TextCtrl"));

    m_pgPropSkewY = m_pgParameterMgr->AppendIn(m_pgCatSkrew, new wxStringProperty(_("Y [degree]"), wxPG_LABEL, _("0")));
    m_pgPropSkewY->SetHelpString(wxT(""));
    m_pgPropSkewY->SetEditor(wxT("TextCtrl"));

    m_autoGenerate = new wxCheckBox(m_splitterPage3193, wxID_ANY, _("Auto Generate"), wxDefaultPosition,
        wxDLG_UNIT(m_splitterPage3193, wxSize(-1, -1)), 0);
    m_autoGenerate->SetValue(true);
    m_autoGenerate->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_autoGenerateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_autoGenerate->SetFont(m_autoGenerateFont);
    m_autoGenerate->SetToolTip(_("Regenerate the template automatically if a any parameter was changed"));

    flexGridSizer2972->Add(m_autoGenerate, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(1));

    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_pgMainBook)) {
	wxPersistenceManager::Get().RegisterAndRestore(m_pgMainBook);
    } else {
	wxPersistenceManager::Get().Restore(m_pgMainBook);
    }
#endif

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_tbOutput)) {
	wxPersistenceManager::Get().RegisterAndRestore(m_tbOutput);
    } else {
	wxPersistenceManager::Get().Restore(m_tbOutput);
    }
#endif

    SetName(wxT("PathGeneratorFrameBase"));
    SetSize(wxDLG_UNIT(this, wxSize(1600, 750)));
    if(GetSizer()) {
	GetSizer()->Fit(this);
    }
    if(GetParent()) {
	CentreOnParent(wxBOTH);
    } else {
	CentreOnScreen(wxBOTH);
    }
    if(!wxPersistenceManager::Get().Find(this)) {
	wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
	wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    this->Bind(wxEVT_CLOSE_WINDOW, &PathGeneratorFrameBase::onCloseWindow, this);
    this->Bind(wxEVT_SIZE, &PathGeneratorFrameBase::onSize, this);
    this->Bind(wxEVT_ACTIVATE, &PathGeneratorFrameBase::onActivate, this);
    this->Bind(wxEVT_MAXIMIZE, &PathGeneratorFrameBase::onMaximize, this);
    this->Bind(wxEVT_SHOW, &PathGeneratorFrameBase::onShow, this);
    m_mainSplitter->Bind(
        wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, &PathGeneratorFrameBase::mainShashPositionChanged, this);
    m_mainSplitter->Bind(
        wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING, &PathGeneratorFrameBase::mainShashPositionChanging, this);
    m_btPGMinimizeTree->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::toogleTreeSize, this);
    m_treeSearchText->Bind(wxEVT_COMMAND_TEXT_UPDATED, &PathGeneratorFrameBase::updateTreeSearch, this);
    m_treeSearchText->Bind(wxEVT_KEY_DOWN, &PathGeneratorFrameBase::keyDownTreeSearch, this);
    m_btSearchTree->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::treeSearch, this);
    m_templateTree->Bind(wxEVT_COMMAND_TREE_SEL_CHANGED, &PathGeneratorFrameBase::selectTemplateTree, this);
    m_pgPathSelector->Bind(wxEVT_COMMAND_COMBOBOX_SELECTED, &PathGeneratorFrameBase::selectPathSelector, this);
    m_pgMainBook->Bind(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, &PathGeneratorFrameBase::pgMainBookChanged, this);
#if wxUSE_WEBVIEW

#endif // wxUSE_WEBVIEW
    m_cbEditMode->Bind(wxEVT_COMMAND_COMBOBOX_SELECTED, &PathGeneratorFrameBase::selectEditMode, this);
    m_updatePreview->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::updatePreview, this);
    m_cbDisplayMode->Bind(wxEVT_COMMAND_COMBOBOX_SELECTED, &PathGeneratorFrameBase::selectDisplayMode, this);
    m_btPGGenerate->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::generatePath, this);
    m_btPGClear->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::clearView, this);
    m_btPGReplaceEdit->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::relaceEditControlSelection, this);
    m_btPGCopy->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::copyPath, this);
    m_btPGSave->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::saveTemplate, this);
    m_btPGMinimize->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::toogleSize, this);
    m_btPGClose->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::onCloseWindowFromButton, this);
    m_pgParameterMgr->Bind(wxEVT_PG_CHANGED, &PathGeneratorFrameBase::propertyChanged, this);
    m_pgParameterMgr->Bind(wxEVT_PG_CHANGING, &PathGeneratorFrameBase::propertyChanging, this);
    m_autoGenerate->Bind(wxEVT_COMMAND_CHECKBOX_CLICKED, &PathGeneratorFrameBase::checkAutoGenerate, this);
}

PathGeneratorFrameBase::~PathGeneratorFrameBase()
{
    this->Unbind(wxEVT_CLOSE_WINDOW, &PathGeneratorFrameBase::onCloseWindow, this);
    this->Unbind(wxEVT_SIZE, &PathGeneratorFrameBase::onSize, this);
    this->Unbind(wxEVT_ACTIVATE, &PathGeneratorFrameBase::onActivate, this);
    this->Unbind(wxEVT_MAXIMIZE, &PathGeneratorFrameBase::onMaximize, this);
    this->Unbind(wxEVT_SHOW, &PathGeneratorFrameBase::onShow, this);
    m_mainSplitter->Unbind(
        wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, &PathGeneratorFrameBase::mainShashPositionChanged, this);
    m_mainSplitter->Unbind(
        wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING, &PathGeneratorFrameBase::mainShashPositionChanging, this);
    m_btPGMinimizeTree->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::toogleTreeSize, this);
    m_treeSearchText->Unbind(wxEVT_COMMAND_TEXT_UPDATED, &PathGeneratorFrameBase::updateTreeSearch, this);
    m_treeSearchText->Unbind(wxEVT_KEY_DOWN, &PathGeneratorFrameBase::keyDownTreeSearch, this);
    m_btSearchTree->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::treeSearch, this);
    m_templateTree->Unbind(wxEVT_COMMAND_TREE_SEL_CHANGED, &PathGeneratorFrameBase::selectTemplateTree, this);
    m_pgPathSelector->Unbind(wxEVT_COMMAND_COMBOBOX_SELECTED, &PathGeneratorFrameBase::selectPathSelector, this);
    m_pgMainBook->Unbind(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, &PathGeneratorFrameBase::pgMainBookChanged, this);
#if wxUSE_WEBVIEW

#endif // wxUSE_WEBVIEW
    m_cbEditMode->Unbind(wxEVT_COMMAND_COMBOBOX_SELECTED, &PathGeneratorFrameBase::selectEditMode, this);
    m_updatePreview->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::updatePreview, this);
    m_cbDisplayMode->Unbind(wxEVT_COMMAND_COMBOBOX_SELECTED, &PathGeneratorFrameBase::selectDisplayMode, this);
    m_btPGGenerate->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::generatePath, this);
    m_btPGClear->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::clearView, this);
    m_btPGReplaceEdit->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::relaceEditControlSelection, this);
    m_btPGCopy->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::copyPath, this);
    m_btPGSave->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::saveTemplate, this);
    m_btPGMinimize->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::toogleSize, this);
    m_btPGClose->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PathGeneratorFrameBase::onCloseWindowFromButton, this);
    m_pgParameterMgr->Unbind(wxEVT_PG_CHANGED, &PathGeneratorFrameBase::propertyChanged, this);
    m_pgParameterMgr->Unbind(wxEVT_PG_CHANGING, &PathGeneratorFrameBase::propertyChanging, this);
    m_autoGenerate->Unbind(wxEVT_COMMAND_CHECKBOX_CLICKED, &PathGeneratorFrameBase::checkAutoGenerate, this);
}
