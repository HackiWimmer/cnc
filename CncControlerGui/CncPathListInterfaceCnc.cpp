#include "CncControl.h"
#include "CncPathListInterfaceCnc.h"

////////////////////////////////////////////////////////////////////
CncPathListInterfaceCnc::CncPathListInterfaceCnc(CncControl* cc)
: Interface	(IT_CncControl)
, cnc		(cc)
////////////////////////////////////////////////////////////////////
{ 
	wxASSERT ( cnc != NULL ); 
}
////////////////////////////////////////////////////////////////////
CncPathListInterfaceCnc::~CncPathListInterfaceCnc() {
////////////////////////////////////////////////////////////////////
}
////////////////////////////////////////////////////////////////////
CncLongPosition CncPathListInterfaceCnc::getPositionSteps()  const { 
////////////////////////////////////////////////////////////////////
	return cnc->getCurCtlPos(); 
}
////////////////////////////////////////////////////////////////////
CncDoublePosition CncPathListInterfaceCnc::getPositionMetric() const { 
////////////////////////////////////////////////////////////////////
	return cnc->getCurCtlPosMetric(); 
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::logMeasurementStart() { 
////////////////////////////////////////////////////////////////////
	cnc->startSerialMeasurement(); 
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::logMeasurementEnd() { 
////////////////////////////////////////////////////////////////////
	cnc->stopSerialMeasurement();  
}
////////////////////////////////////////////////////////////////////
bool CncPathListInterfaceCnc::isInterrupted() { 
////////////////////////////////////////////////////////////////////
	return cnc->isInterrupted();  
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::publishGuidePath(const CncPathListManager& plm, double zOffset) { 
////////////////////////////////////////////////////////////////////
	cnc->addGuidePath(plm, zOffset);
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::processClientIDChange(long cid) { 
////////////////////////////////////////////////////////////////////
	cnc->setClientId(cid); 
}
////////////////////////////////////////////////////////////////////
bool CncPathListInterfaceCnc::processFeedSpeedChange(double value_MM_MIN, CncSpeedMode m) { 
////////////////////////////////////////////////////////////////////
	return cnc->changeCurrentFeedSpeedXYZ_MM_MIN(value_MM_MIN, m); 
}
////////////////////////////////////////////////////////////////////
bool CncPathListInterfaceCnc::processToolChange(double diameter) { 
////////////////////////////////////////////////////////////////////
	return true; 
}
////////////////////////////////////////////////////////////////////
bool CncPathListInterfaceCnc::processSpindleStateSwitch(bool on, bool force) { 
////////////////////////////////////////////////////////////////////
	return cnc->switchSpindleState(on, force); 
}
////////////////////////////////////////////////////////////////////
bool CncPathListInterfaceCnc::processSpindleSpeedChange(double value_U_MIN) { 
////////////////////////////////////////////////////////////////////
	return cnc->changeCurrentSpindleSpeed_U_MIN(value_U_MIN); 
}
////////////////////////////////////////////////////////////////////
bool CncPathListInterfaceCnc::processMoveSequence(CncMoveSequence& msq) { 
////////////////////////////////////////////////////////////////////
	return cnc->processMoveSequence(msq); 
}
////////////////////////////////////////////////////////////////////
bool CncPathListInterfaceCnc::processPathListEntry(const CncPathListEntry& ple) { 
////////////////////////////////////////////////////////////////////
	return cnc->moveAbsLinearMetricXYZ(	ple.entryTarget.getX(),
										ple.entryTarget.getY(),
										ple.entryTarget.getZ(),
										ple.alreadyRendered); 
}																														
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::processTrigger(const Trigger::BeginRun& tr) { 
////////////////////////////////////////////////////////////////////
	cnc->processTrigger(tr); 
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::processTrigger(const Trigger::EndRun& tr) { 
////////////////////////////////////////////////////////////////////
	cnc->processTrigger(tr); 
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::processTrigger(const Trigger::NextPath& tr) { 
////////////////////////////////////////////////////////////////////
	cnc->processTrigger(tr); 
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::processTrigger(const Trigger::SpeedChange& tr) { 
////////////////////////////////////////////////////////////////////
	cnc->processTrigger(tr); 
}
////////////////////////////////////////////////////////////////////
void CncPathListInterfaceCnc::processTrigger(const Trigger::GuidePath& tr) { 
////////////////////////////////////////////////////////////////////
	cnc->processTrigger(tr); 
}

