#include "CncProcessingInfo.h"

///////////////////////////////////////////////////////////////
CncProcessingInfo::CncProcessingInfo() 
: runPhase				(RP_Unknown)
, finalizeAfter			(RP_LAST)
, lastLineNumber		(UNDEFINED_LINE_NUMBER)
, waitingForUserEvents	(false)
, state					(false)
, stop					(false)
, next					(false)
, pause					(false)
///////////////////////////////////////////////////////////////
{
	for ( unsigned int i=0; i<RP_LAST; i++)
		debugMode[i] = false;
}
///////////////////////////////////////////////////////////////
CncProcessingInfo::~CncProcessingInfo() {
///////////////////////////////////////////////////////////////
}
///////////////////////////////////////////////////////////////
void CncProcessingInfo::reset() {
///////////////////////////////////////////////////////////////
	*this = CncProcessingInfo();
}
///////////////////////////////////////////////////////////////
void CncProcessingInfo::stopProcessingAfter(RunPhase fa) {
///////////////////////////////////////////////////////////////
	finalizeAfter = fa;
}
///////////////////////////////////////////////////////////////
bool CncProcessingInfo::processMore() {
///////////////////////////////////////////////////////////////
	if ( runPhase >= finalizeAfter ) {
		std::clog << "This run are configured finalized after step: " << getCurrentDebugPhaseAsString() << std::endl;
		return false;
	}
		
	return true;
}
///////////////////////////////////////////////////////////////
void CncProcessingInfo::setDebugMode(RunPhase p, bool mode) {
///////////////////////////////////////////////////////////////
	if ( p == RP_Unknown)
		return;
		
	if ( p == RP_LAST)
		return;
		
	debugMode[p] = mode;
}
///////////////////////////////////////////////////////////////
void CncProcessingInfo::debugAllPhases() {
///////////////////////////////////////////////////////////////
	for ( unsigned int i=1; i<RP_LAST; i++)
		debugMode[i] = true;
}
///////////////////////////////////////////////////////////////
void CncProcessingInfo::releaseAllPhases() {
///////////////////////////////////////////////////////////////
	for ( unsigned int i=1; i<RP_LAST; i++)
		debugMode[i] = false;
}
///////////////////////////////////////////////////////////////
void CncProcessingInfo::setCurrentRunPhase(RunPhase p) { 
///////////////////////////////////////////////////////////////
	if ( p == RP_LAST ) 	runPhase = RP_Unknown;
	else					runPhase = p; 
	
	setCurrentDebugState(debugMode[runPhase]);
}
///////////////////////////////////////////////////////////////
const char* CncProcessingInfo::getCurrentDebugPhaseAsString() const {
///////////////////////////////////////////////////////////////
	switch ( runPhase) {
		case RP_Preprocesser: 	return "Preprocessor";
		case RP_Spool:			return "Spooling";
		default:				return "";
	}
}
////////////////////////////////////////////////////////////////
const char* CncProcessingInfo::getDebugModeAsString() const {
///////////////////////////////////////////////////////////////
	if ( getCurrentDebugMode() == true ) 	return "Debug Mode";
	else									return "Release Mode";
}