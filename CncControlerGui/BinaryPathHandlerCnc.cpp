#include "BinaryPathHandlerCnc.h"

/////////////////////////////////////////////////////////////
BinaryPathHandlerCnc::BinaryPathHandlerCnc(CncControl* cnc) 
: BinaryPathHandlerBase		()
, CncPathListRunner			(cnc)
, cncControl				(cnc)
/////////////////////////////////////////////////////////////
{
}
/////////////////////////////////////////////////////////////
BinaryPathHandlerCnc::~BinaryPathHandlerCnc() {
/////////////////////////////////////////////////////////////
}
/////////////////////////////////////////////////////////////
bool BinaryPathHandlerCnc::processCommand(const unsigned char* buffer, int nbBytes) {
/////////////////////////////////////////////////////////////
	const bool usePathListRunner = true;
	if ( usePathListRunner == true)
		return CncPathListRunner::processCommand(buffer, nbBytes);

	// ... or direct cnc control communication
	if ( nbBytes <= 0 || buffer == NULL)
		return true;

	return cncControl->execute(buffer, nbBytes);
}
/////////////////////////////////////////////////////////////
void BinaryPathHandlerCnc::initNextClientId(long id) {
/////////////////////////////////////////////////////////////
	wxASSERT(cncControl);
	cncControl->setClientId(id);
}
/////////////////////////////////////////////////////////////
void BinaryPathHandlerCnc::logMeasurementStart() {
/////////////////////////////////////////////////////////////
	wxASSERT(cncControl);
	cncControl->startSerialMeasurement();
}
/////////////////////////////////////////////////////////////
void BinaryPathHandlerCnc::logMeasurementEnd() {
/////////////////////////////////////////////////////////////
	wxASSERT(cncControl);
	cncControl->stopSerialMeasurement();
}


