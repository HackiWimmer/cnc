//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterImages.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#ifndef _CNCGUICONTROLLER_CNCCONTROLERGUI_WXCRAFTERIMAGES_BASE_CLASSES_H
#define _CNCGUICONTROLLER_CNCCONTROLERGUI_WXCRAFTERIMAGES_BASE_CLASSES_H

// clang-format off
#include <wx/settings.h>
#include <wx/xrc/xmlres.h>
#include <wx/xrc/xh_bmp.h>
#include <wx/imaglist.h>
#include <wx/bitmap.h>
#include <wx/artprov.h>
#include <map>
#include <wx/icon.h>
#if wxVERSION_NUMBER >= 2900
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/persist/bookctrl.h>
#include <wx/persist/treebook.h>
#endif

#ifdef WXC_FROM_DIP
#undef WXC_FROM_DIP
#endif
#if wxVERSION_NUMBER >= 3100
#define WXC_FROM_DIP(x) wxWindow::FromDIP(x, NULL)
#else
#define WXC_FROM_DIP(x) x
#endif

// clang-format on

class ImageLib16 : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLib16();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLib16();
};

class ImageLib24 : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLib24();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLib24();
};

class ImageLibFile : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibFile();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibFile();
};

class ImageLibBig : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibBig();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibBig();
};

class ImageLibPortSelector : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibPortSelector();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibPortSelector();
};

class ImageLibAppIcons : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibAppIcons();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibAppIcons();
};

class ImageLibDebugger : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibDebugger();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibDebugger();
};

class ImageLibConfig : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibConfig();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibConfig();
};

class ImageLibPosSpy : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibPosSpy();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibPosSpy();
};

class ImageLibSetterList : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibSetterList();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibSetterList();
};

class ImageLibProbe : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibProbe();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibProbe();
};

class ImageLibStatistics : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibStatistics();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibStatistics();
};

class ImageLibSummary : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibSummary();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibSummary();
};

class ImageLibPerspective : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibPerspective();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibPerspective();
};

class ImageLibHeartbeat : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibHeartbeat();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibHeartbeat();
};

class ImageLibSecureRun : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibSecureRun();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibSecureRun();
};

class ImageLibSpeed : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibSpeed();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibSpeed();
};

class ImageLibGamepad : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibGamepad();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibGamepad();
};

class ImageLibPathList : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibPathList();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibPathList();
};

class ImageLibLogger : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibLogger();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibLogger();
};

class ImageLibMotionVertex : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibMotionVertex();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibMotionVertex();
};

class ImageLibSynopsisTrace : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibSynopsisTrace();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibSynopsisTrace();
};

class ImageLibSwitch : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibSwitch();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibSwitch();
};

class ImageLibAui : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibAui();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibAui();
};

class ImageLibPower : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    ImageLibPower();
    const wxBitmap& Bitmap(const wxString& name) const
    {
	if(!m_bitmaps.count(name + m_resolution))
	    return wxNullBitmap;
	return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString)
    {
	m_resolution = res;
    }

    virtual ~ImageLibPower();
};

#endif
