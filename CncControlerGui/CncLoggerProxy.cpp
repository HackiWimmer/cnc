#include "CncCommon.h"
#include "CncConfig.h"
#include "MainFrame.h"
#include "CncTemplateContextSummaryPanel.h"
#include "CncLoggerListCtrl.h"
#include "CncLoggerView.h"
#include "CncLoggerProxy.h"

//////////////////////////////////////////////////////////////
CncStartupLoggerProxy::CncStartupLoggerProxy(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, 
												long style, const wxValidator &validator, const wxString &name)
: CncTextCtrl(parent, wxID_ANY, value, pos, size, style, validator, name)
//////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////
CncStartupLoggerProxy::~CncStartupLoggerProxy() {
//////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////
void CncStartupLoggerProxy::appendChar(char c, const wxColour& col, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		setTextColour(col);
		lastSourceID = sourceId;
	}
	
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::STARTUP, c);
}
//////////////////////////////////////////////////////////////
void CncStartupLoggerProxy::appendChar(char c, const wxTextAttr& style, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		SetDefaultStyle(style);
		lastSourceID = sourceId;
	}
	
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::STARTUP, c);
}
//////////////////////////////////////////////////////////////
bool CncStartupLoggerProxy::setTextColour(const wxColour& col) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->changeTextColour(LoggerSelection::VAL::STARTUP, col);
	return true;
}
//////////////////////////////////////////////////////////////
bool CncStartupLoggerProxy::SetDefaultStyle(const wxTextAttr& style) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->changeTextAttr(LoggerSelection::VAL::STARTUP, style);
	return true;
}
//////////////////////////////////////////////////////////////
void CncStartupLoggerProxy::AppendChar(char c) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::STARTUP, c);
}
//////////////////////////////////////////////////////////////
void CncStartupLoggerProxy::AppendText(const wxString &text) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::STARTUP, text);
}



//////////////////////////////////////////////////////////////
CncStandardLoggerProxy::CncStandardLoggerProxy(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, 
													long style, const wxValidator &validator, const wxString &name)
: CncTextCtrl(parent, wxID_ANY, value, pos, size, style, validator, name)
//////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////
CncStandardLoggerProxy::~CncStandardLoggerProxy() {
//////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////
void CncStandardLoggerProxy::appendChar(char c, const wxColour& col, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		setTextColour(col);
		lastSourceID = sourceId;
	}
	
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::CNC, c);
}
//////////////////////////////////////////////////////////////
void CncStandardLoggerProxy::appendChar(char c, const wxTextAttr& style, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		SetDefaultStyle(style);
		lastSourceID = sourceId;
	}
	
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::CNC, c);
}
//////////////////////////////////////////////////////////////
bool CncStandardLoggerProxy::setTextColour(const wxColour& col) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->changeTextColour(LoggerSelection::VAL::CNC, col);
	return true;
}
//////////////////////////////////////////////////////////////
bool CncStandardLoggerProxy::SetDefaultStyle(const wxTextAttr& style) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->changeTextAttr(LoggerSelection::VAL::CNC, style);
	return true;
}
//////////////////////////////////////////////////////////////
void CncStandardLoggerProxy::AppendChar(char c) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::CNC, c);
}
//////////////////////////////////////////////////////////////
void CncStandardLoggerProxy::AppendText(const wxString &text) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->add(LoggerSelection::VAL::CNC, text);
}


//////////////////////////////////////////////////////////////
CncDryRunLoggerProxy::CncDryRunLoggerProxy(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, 
												long style, const wxValidator &validator, const wxString &name)
: CncTextCtrl(parent, wxID_ANY, value, pos, size, style, validator, name)
//////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////
CncDryRunLoggerProxy::~CncDryRunLoggerProxy() {
//////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////
void CncDryRunLoggerProxy::appendChar(char c, const wxColour& col, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		setTextColour(col);
		lastSourceID = sourceId;
	}
	
	THE_APP->getTemplateContextSummary()->getDryRunLogger()->add(c);
}
//////////////////////////////////////////////////////////////
void CncDryRunLoggerProxy::appendChar(char c, const wxTextAttr& style, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		SetDefaultStyle(style);
		lastSourceID = sourceId;
	}
	
	THE_APP->getTemplateContextSummary()->getDryRunLogger()->add(c);
}
//////////////////////////////////////////////////////////////
bool CncDryRunLoggerProxy::setTextColour(const wxColour& col) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getDryRunLogger()->changeTextAttr(col);
	return true;
}
//////////////////////////////////////////////////////////////
bool CncDryRunLoggerProxy::SetDefaultStyle(const wxTextAttr& style) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getDryRunLogger()->changeTextAttr(style);
	return true;
}
//////////////////////////////////////////////////////////////
void CncDryRunLoggerProxy::AppendChar(char c) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getDryRunLogger()->add(c);
}
//////////////////////////////////////////////////////////////
void CncDryRunLoggerProxy::AppendText(const wxString &text) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getDryRunLogger()->add(text);
}


//////////////////////////////////////////////////////////////
CncParserSynopsisProxy::CncParserSynopsisProxy(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, 
												long style, const wxValidator &validator, const wxString &name)
: CncTextCtrl(parent, wxID_ANY, value, pos, size, style, validator, name)
//////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////
CncParserSynopsisProxy::~CncParserSynopsisProxy() {
//////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////
bool CncParserSynopsisProxy::hasDebugEntries() const { 
//////////////////////////////////////////////////////////////////
	return THE_APP->getTemplateContextSummary()->getParsingSynopsis()->hasDebugEntries(); 
}
//////////////////////////////////////////////////////////////////
bool CncParserSynopsisProxy::hasWarnEntries() const {
//////////////////////////////////////////////////////////////////
	return THE_APP->getTemplateContextSummary()->getParsingSynopsis()->hasWarnEntries(); 
}
//////////////////////////////////////////////////////////////////
bool CncParserSynopsisProxy::hasErrorEntries() const { 
//////////////////////////////////////////////////////////////////
	return THE_APP->getTemplateContextSummary()->getParsingSynopsis()->hasErrorEntries(); 
}
//////////////////////////////////////////////////////////////////
void CncParserSynopsisProxy::popProcessMode() {
//////////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->popProcessMode(); 
}
//////////////////////////////////////////////////////////////////
void CncParserSynopsisProxy::pushUpdateMode() {
//////////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->pushUpdateMode(); 
}
//////////////////////////////////////////////////////////////////
void CncParserSynopsisProxy::addEntry(const char type, const wxString& entry) { 
//////////////////////////////////////////////////////////////////
	CncExtLoggerListCtrl* logger = THE_APP->getTemplateContextSummary()->getParsingSynopsis();
	switch ( type )
	{
		case 'W':	logger->addWarnEntry(entry);	break;
		case 'E':	logger->addErrorEntry(entry);	break;
		case 'S':	logger->addSeparator(entry);	break;
		default:	logger->addInfoEntry(entry);
	}
}
//////////////////////////////////////////////////////////////
void CncParserSynopsisProxy::appendChar(char c, const wxColour& col, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		setTextColour(col);
		lastSourceID = sourceId;
	}
	
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->add(c);
}
//////////////////////////////////////////////////////////////
void CncParserSynopsisProxy::appendChar(char c, const wxTextAttr& style, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		SetDefaultStyle(style);
		lastSourceID = sourceId;
	}
	
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->add(c);
}
//////////////////////////////////////////////////////////////
bool CncParserSynopsisProxy::setTextColour(const wxColour& col) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->changeTextAttr(col);
	return true;
}
//////////////////////////////////////////////////////////////
bool CncParserSynopsisProxy::SetDefaultStyle(const wxTextAttr& style) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->changeTextAttr(style);
	return true;
}
//////////////////////////////////////////////////////////////
void CncParserSynopsisProxy::AppendChar(char c) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->add(c);
}
//////////////////////////////////////////////////////////////
void CncParserSynopsisProxy::AppendText(const wxString &text) {
//////////////////////////////////////////////////////////////
	THE_APP->getTemplateContextSummary()->getParsingSynopsis()->add(text);
}


//////////////////////////////////////////////////////////////
CncMsgHistoryLoggerProxy::CncMsgHistoryLoggerProxy(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, 
													long style, const wxValidator &validator, const wxString &name)
: CncTextCtrl(parent, wxID_ANY, value, pos, size, style, validator, name)
//////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////
CncMsgHistoryLoggerProxy::~CncMsgHistoryLoggerProxy() {
//////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////
void CncMsgHistoryLoggerProxy::appendChar(char c, const wxColour& col, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		setTextColour(col);
		lastSourceID = sourceId;
	}
	
	THE_APP->getCtrlMsgHistoryList()->add(c);
}
//////////////////////////////////////////////////////////////
void CncMsgHistoryLoggerProxy::appendChar(char c, const wxTextAttr& style, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		SetDefaultStyle(style);
		lastSourceID = sourceId;
	}
	
	THE_APP->getCtrlMsgHistoryList()->add(c);
}
//////////////////////////////////////////////////////////////
bool CncMsgHistoryLoggerProxy::setTextColour(const wxColour& col) {
//////////////////////////////////////////////////////////////
	THE_APP->getCtrlMsgHistoryList()->changeTextAttr(col);
	return true;
}
//////////////////////////////////////////////////////////////
bool CncMsgHistoryLoggerProxy::SetDefaultStyle(const wxTextAttr& style) {
//////////////////////////////////////////////////////////////
	THE_APP->getCtrlMsgHistoryList()->changeTextAttr(style);
	return true;
}
//////////////////////////////////////////////////////////////
void CncMsgHistoryLoggerProxy::AppendChar(char c) {
//////////////////////////////////////////////////////////////
	THE_APP->getCtrlMsgHistoryList()->add(c);
}
//////////////////////////////////////////////////////////////
void CncMsgHistoryLoggerProxy::AppendText(const wxString &text) {
//////////////////////////////////////////////////////////////
	THE_APP->getCtrlMsgHistoryList()->add(text);
}


/////////////////////////////////////////////////////////////
CncTraceProxy::CncTraceProxy(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, 
								long style, const wxValidator &validator, const wxString &name)
: CncTextCtrl(parent, wxID_ANY, value, pos, size, style | wxTE_RICH | wxTE_READONLY | wxTE_MULTILINE | wxTE_DONTWRAP, validator, name)
//////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////
CncTraceProxy::~CncTraceProxy() {
//////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////
void CncTraceProxy::Clear() {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->clearTrace();
}
//////////////////////////////////////////////////////////////
void CncTraceProxy::appendChar(char c, const wxColour& col, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		setTextColour(col);
		lastSourceID = sourceId;
	}
	
	THE_APP->getLoggerView()->add(c);
}
//////////////////////////////////////////////////////////////
void CncTraceProxy::appendChar(char c, const wxTextAttr& style, int sourceId) {
//////////////////////////////////////////////////////////////
	if ( lastSourceID != sourceId )
	{
		SetDefaultStyle(style);
		lastSourceID = sourceId;
	}
	
	THE_APP->getLoggerView()->add(c);
}
//////////////////////////////////////////////////////////////
bool CncTraceProxy::setTextColour(const wxColour& col) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->changeTextAttr(col);
	return true;
}
//////////////////////////////////////////////////////////////
bool CncTraceProxy::SetDefaultStyle(const wxTextAttr& style) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->changeTextAttr(style);
	return true;
}
//////////////////////////////////////////////////////////////
void CncTraceProxy::AppendChar(char c) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->trace(c);
}
//////////////////////////////////////////////////////////////
void CncTraceProxy::AppendText(const wxString &text) {
//////////////////////////////////////////////////////////////
	THE_APP->getLoggerView()->trace(text);
}

